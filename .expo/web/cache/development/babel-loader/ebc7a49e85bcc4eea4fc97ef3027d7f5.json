{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Environment } from \"../environment\";\nimport { _getToken, _getUserId } from \"./authService\";\nimport { fetchAPIGet, fetchAPIPost } from \"./baseService\";\nvar url = Environment.apiPost;\nexport var ProductService = function () {\n  function ProductService() {\n    _classCallCheck(this, ProductService);\n\n    this.getProductItemList = function _callee(_listReportNo, _pageNum, _pageSize) {\n      var token, response, json;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(_getToken());\n\n            case 2:\n              token = _context.sent;\n              _context.prev = 3;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(fetch(url + \"/api/Product/GetProductItemList\", {\n                method: \"POST\",\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\",\n                  Authorization: token ? \"Bearer \" + token : \"\"\n                },\n                body: JSON.stringify({\n                  ListReportNo: _listReportNo.toString(),\n                  PageNum: _pageNum,\n                  PageSize: _pageSize\n                })\n              }));\n\n            case 6:\n              response = _context.sent;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              json = _context.sent;\n              return _context.abrupt(\"return\", json);\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](3);\n              console.error(_context.t0);\n              return _context.abrupt(\"return\", _context.t0);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[3, 13]], Promise);\n    };\n  }\n\n  _createClass(ProductService, null, [{\n    key: \"create\",\n    value: function create(model) {\n      var data;\n      return _regeneratorRuntime.async(function create$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Product/Create\",\n                body: model\n              }));\n\n            case 2:\n              data = _context2.sent;\n              return _context2.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"update\",\n    value: function update(model) {\n      var data;\n      return _regeneratorRuntime.async(function update$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Product/Update\",\n                body: model\n              }));\n\n            case 2:\n              data = _context3.sent;\n              return _context3.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getAllProduct\",\n    value: function getAllProduct() {\n      var data;\n      return _regeneratorRuntime.async(function getAllProduct$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIGet({\n                url: \"/api/Product/GetAllProduct\"\n              }));\n\n            case 2:\n              data = _context4.sent;\n              return _context4.abrupt(\"return\", data.data);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getAllProductFast\",\n    value: function getAllProductFast(Month, Year, ItemCode) {\n      var data;\n      return _regeneratorRuntime.async(function getAllProductFast$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Product/GetProductFast\",\n                body: {\n                  Month: Month,\n                  Year: Year,\n                  ItemCode: ItemCode\n                }\n              }));\n\n            case 2:\n              data = _context5.sent;\n              return _context5.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getProductItemList\",\n    value: function getProductItemList(model) {\n      var data;\n      return _regeneratorRuntime.async(function getProductItemList$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Product/GetProductItemList\",\n                body: model\n              }));\n\n            case 2:\n              data = _context6.sent;\n              return _context6.abrupt(\"return\", data.data);\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getProductByCategoryId\",\n    value: function getProductByCategoryId() {\n      var pageNumber,\n          pageSize,\n          listcategoryId,\n          param,\n          data,\n          _args7 = arguments;\n      return _regeneratorRuntime.async(function getProductByCategoryId$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              pageNumber = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : 1;\n              pageSize = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : 10;\n              listcategoryId = _args7.length > 2 ? _args7[2] : undefined;\n              param = \"?pageNumber=\" + pageNumber + \"&pageSize=\" + pageSize;\n              listcategoryId.map(function (map, index) {\n                param = param + (\"&listcategoryId=\" + map);\n              });\n              _context7.next = 7;\n              return _regeneratorRuntime.awrap(fetchAPIGet({\n                url: \"/api/Product/GetProductByCategoryId\" + param\n              }));\n\n            case 7:\n              data = _context7.sent;\n              return _context7.abrupt(\"return\", data);\n\n            case 9:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return ProductService;\n}();\n\nProductService.getProductItem = function _callee2(_listReportNo, _pageNum, _pageSize, _dateFrom, _dateTo) {\n  var token, response, json;\n  return _regeneratorRuntime.async(function _callee2$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 2:\n          token = _context8.sent;\n          _context8.prev = 3;\n          _context8.next = 6;\n          return _regeneratorRuntime.awrap(fetch(url + \"/api/Product/GetProductItem\", {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n              Authorization: token ? \"Bearer \" + token : \"\"\n            },\n            body: JSON.stringify({\n              ListReportNo: _listReportNo.toString(),\n              PageNum: _pageNum,\n              PageSize: _pageSize,\n              StringDateFrom: _dateFrom,\n              StringDateTo: _dateTo\n            })\n          }));\n\n        case 6:\n          response = _context8.sent;\n          _context8.next = 9;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 9:\n          json = _context8.sent;\n          return _context8.abrupt(\"return\", json);\n\n        case 13:\n          _context8.prev = 13;\n          _context8.t0 = _context8[\"catch\"](3);\n          console.error(_context8.t0);\n          return _context8.abrupt(\"return\", _context8.t0);\n\n        case 17:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, [[3, 13]], Promise);\n};\n\nProductService.updatePriceProduct = function _callee3(_ProdNum, _maxPrice, _minPrice) {\n  var token, getUserId, response, json;\n  return _regeneratorRuntime.async(function _callee3$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 2:\n          token = _context9.sent;\n          _context9.next = 5;\n          return _regeneratorRuntime.awrap(_getUserId());\n\n        case 5:\n          getUserId = _context9.sent;\n          _context9.prev = 6;\n          _context9.next = 9;\n          return _regeneratorRuntime.awrap(fetch(url + \"/api/Product/UpdatePriceProduct\", {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n              Authorization: token ? \"Bearer \" + token : \"\"\n            },\n            body: JSON.stringify({\n              UserId: getUserId,\n              ProdNum: _ProdNum,\n              maxPrice: _maxPrice,\n              minPrice: _minPrice\n            })\n          }));\n\n        case 9:\n          response = _context9.sent;\n          _context9.next = 12;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 12:\n          json = _context9.sent;\n          return _context9.abrupt(\"return\", json);\n\n        case 16:\n          _context9.prev = 16;\n          _context9.t0 = _context9[\"catch\"](6);\n          console.error(_context9.t0);\n          return _context9.abrupt(\"return\", _context9.t0);\n\n        case 20:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, [[6, 16]], Promise);\n};\n\nProductService.getProductItemListByReportNo = function _callee4(_listReportNo) {\n  var token, response, json;\n  return _regeneratorRuntime.async(function _callee4$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 2:\n          token = _context10.sent;\n          _context10.prev = 3;\n          _context10.next = 6;\n          return _regeneratorRuntime.awrap(fetch(url + \"/api/Product/GetProductItemListByReportNo\", {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n              Authorization: token ? \"Bearer \" + token : \"\"\n            },\n            body: JSON.stringify({\n              ListReportNo: _listReportNo.toString()\n            })\n          }));\n\n        case 6:\n          response = _context10.sent;\n          _context10.next = 9;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 9:\n          json = _context10.sent;\n          return _context10.abrupt(\"return\", json);\n\n        case 13:\n          _context10.prev = 13;\n          _context10.t0 = _context10[\"catch\"](3);\n          console.error(_context10.t0);\n          return _context10.abrupt(\"return\", _context10.t0);\n\n        case 17:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, [[3, 13]], Promise);\n};\n\nProductService.getRangeOfFoodCostByProd = function _callee5(ProdNum) {\n  var token, response, json;\n  return _regeneratorRuntime.async(function _callee5$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 2:\n          token = _context11.sent;\n          _context11.prev = 3;\n          _context11.next = 6;\n          return _regeneratorRuntime.awrap(fetch(url + \"/api/Product/getRangeOfFoodCostByProd\", {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n              Authorization: token ? \"Bearer \" + token : \"\"\n            },\n            body: JSON.stringify({\n              ProdNum: ProdNum\n            })\n          }));\n\n        case 6:\n          response = _context11.sent;\n          _context11.next = 9;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 9:\n          json = _context11.sent;\n          return _context11.abrupt(\"return\", json);\n\n        case 13:\n          _context11.prev = 13;\n          _context11.t0 = _context11[\"catch\"](3);\n          console.error(_context11.t0);\n          return _context11.abrupt(\"return\", _context11.t0);\n\n        case 17:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, [[3, 13]], Promise);\n};","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/netWorking/productService.ts"],"names":["Environment","_getToken","_getUserId","fetchAPIGet","fetchAPIPost","url","apiPost","ProductService","getProductItemList","_listReportNo","_pageNum","_pageSize","token","fetch","method","headers","Accept","Authorization","body","JSON","stringify","ListReportNo","toString","PageNum","PageSize","response","json","console","error","model","data","Month","Year","ItemCode","pageNumber","pageSize","listcategoryId","param","map","index","getProductItem","_dateFrom","_dateTo","StringDateFrom","StringDateTo","updatePriceProduct","_ProdNum","_maxPrice","_minPrice","getUserId","UserId","ProdNum","maxPrice","minPrice","getProductItemListByReportNo","getRangeOfFoodCostByProd"],"mappings":"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","sourcesContent":["import { Environment } from \"../environment\";\r\nimport { IProductModel } from \"../models/IproductModel\";\r\nimport { IResponseModel } from \"../models/IResponseModel\";\r\nimport { _getToken, _getUserId } from \"./authService\";\r\nimport { fetchAPIGet, fetchAPIPost } from \"./baseService\";\r\nlet url = Environment.apiPost;\r\n\r\nexport class ProductService {\r\n  public static async create(model: IProductModel): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Product/Create`,\r\n      body: model,\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n\r\n  public static async update(model: IProductModel): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Product/Update`,\r\n      body: model,\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n\r\n  public static async getAllProduct(): Promise<IProductModel[]> {\r\n    let data = (await fetchAPIGet({\r\n      url: `/api/Product/GetAllProduct`,\r\n    })) as IResponseModel;\r\n    return data.data;\r\n  }\r\n  public static async getAllProductFast(Month:number, Year:number, ItemCode:string): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Product/GetProductFast`,\r\n      body:{Month,Year,ItemCode}\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n \r\n  public static async getProductItemList(model:any): Promise<IProductModel[]> {\r\n    let data = (await fetchAPIPost({\r\n      url: \"/api/Product/GetProductItemList\",\r\n      body: model,\r\n    })) as IResponseModel;\r\n    return data.data;\r\n  }\r\n  \r\n  public static getProductItem = async (\r\n    _listReportNo: any,\r\n    _pageNum: any,\r\n    _pageSize: any,\r\n    _dateFrom:any,\r\n    _dateTo:any\r\n  ) => {\r\n    const token = await _getToken();\r\n    try {\r\n      let response = await fetch(url + \"/api/Product/GetProductItem\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token ? `Bearer ${token}` : \"\",\r\n        },\r\n        body: JSON.stringify({\r\n          ListReportNo: _listReportNo.toString(),\r\n          PageNum: _pageNum,\r\n          PageSize: _pageSize,\r\n          StringDateFrom: _dateFrom,\r\n          StringDateTo: _dateTo,\r\n        }),\r\n      });\r\n      let json = await response.json();\r\n      return json;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return error;\r\n    }\r\n  };\r\n\r\n  public static updatePriceProduct = async (\r\n    _ProdNum: any,\r\n    _maxPrice: any,\r\n    _minPrice: any\r\n  ) => {\r\n    const token = await _getToken();\r\n    const getUserId = await _getUserId();\r\n    try {\r\n      let response = await fetch(url + \"/api/Product/UpdatePriceProduct\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token ? `Bearer ${token}` : \"\",\r\n        },\r\n        body: JSON.stringify({\r\n          UserId: getUserId,\r\n          ProdNum: _ProdNum,\r\n          maxPrice: _maxPrice,\r\n          minPrice: _minPrice,\r\n        }),\r\n      });\r\n      let json = await response.json();\r\n      return json;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return error;\r\n    }\r\n  };\r\n\r\n   getProductItemList = async (\r\n    _listReportNo: any,\r\n    _pageNum: any,\r\n    _pageSize: any\r\n  ) => {\r\n    const token = await _getToken();\r\n    try {\r\n      let response = await fetch(url + \"/api/Product/GetProductItemList\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token ? `Bearer ${token}` : \"\",\r\n        },\r\n        body: JSON.stringify({\r\n          ListReportNo: _listReportNo.toString(),\r\n          PageNum: _pageNum,\r\n          PageSize: _pageSize,\r\n        }),\r\n      });\r\n      let json = await response.json();\r\n      return json;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return error;\r\n    }\r\n  };\r\n\r\n  public static getProductItemListByReportNo = async (_listReportNo: any) => {\r\n    const token = await _getToken();\r\n    try {\r\n      let response = await fetch(\r\n        url + \"/api/Product/GetProductItemListByReportNo\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token ? `Bearer ${token}` : \"\",\r\n          },\r\n          body: JSON.stringify({\r\n            ListReportNo: _listReportNo.toString(),\r\n          }),\r\n        }\r\n      );\r\n      let json = await response.json();\r\n      return json;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return error;\r\n    }\r\n  };\r\n  public static async getProductByCategoryId(\r\n    pageNumber: number = 1,\r\n    pageSize: number = 10,\r\n    listcategoryId: any[]\r\n  ): Promise<IResponseModel> {\r\n    let param = `?pageNumber=${pageNumber}&pageSize=${pageSize}`;\r\n    listcategoryId.map((map, index) => {\r\n      param = param + `&listcategoryId=${map}`;\r\n    });\r\n    let data = (await fetchAPIGet({\r\n      url: `/api/Product/GetProductByCategoryId${param}`,\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static getRangeOfFoodCostByProd = async (ProdNum: number) => {\r\n    const token = await _getToken();\r\n    try {\r\n      let response = await fetch(\r\n        url + \"/api/Product/getRangeOfFoodCostByProd\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token ? `Bearer ${token}` : \"\",\r\n          },\r\n          body: JSON.stringify({\r\n            ProdNum\r\n          }),\r\n        }\r\n      );\r\n      let json = await response.json();\r\n      return json;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return error;\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}