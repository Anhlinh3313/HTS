{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\angular\\\\hts_reactnative\\\\src\\\\app\\\\components\\\\management\\\\items\\\\modalSendEmail.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { colors } from \"../../../utils/Colors\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { ValidateEmail } from \"../utils\";\nimport SvgUri from \"react-native-svg-uri\";\nimport { Icons } from \"../../../assets\";\nimport { ReportService } from \"../../../netWorking/SpeedposService\";\nimport { _getUserId } from \"../../../netWorking/authService\";\nimport DialogAwait from \"../../../components/dialogs/Loading\";\nimport { useSelector } from \"react-redux\";\nexport default function modalSendEmail(_ref) {\n  var _ref$title = _ref.title,\n      title = _ref$title === void 0 ? \"Weekly Crew Schedule & OT Forecast Sample\" : _ref$title,\n      dateTime = _ref.dateTime,\n      visible = _ref.visible,\n      _onRequestClose = _ref.onRequestClose,\n      onChangeText = _ref.onChangeText,\n      onRequestSend = _ref.onRequestSend,\n      _ref$isPickType = _ref.isPickType,\n      isPickType = _ref$isPickType === void 0 ? false : _ref$isPickType;\n\n  var _useSelector = useSelector(function (state) {\n    return state.workplace;\n  }),\n      workPlace = _useSelector.workPlace;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(\"Dear [User Name],\\n\\nPlease find a copy of your report [Report Name] attached to this email\\nThis is an auto-email, please do not reply to this email,\\n  \\nThank you\\n  \\nKind Regards\\n  \\nHTS App,  \\n    \"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      description = _useState4[0],\n      setDescription = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      email = _useState6[0],\n      setEmail = _useState6[1];\n\n  var _useState7 = useState(\"excel\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      valueRadioButton = _useState8[0],\n      setValueRadioButton = _useState8[1];\n\n  var model = {};\n\n  var handleSend = function handleSend() {\n    var res;\n    return _regeneratorRuntime.async(function handleSend$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(email === \"\")) {\n              _context.next = 3;\n              break;\n            }\n\n            alert(\"Email cannot be blank!\");\n            return _context.abrupt(\"return\");\n\n          case 3:\n            if (ValidateEmail(email)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert(\"Email invalid!\");\n            return _context.abrupt(\"return\");\n\n          case 6:\n            model.DateTime = dateTime;\n\n            if (valueRadioButton == \"excel\") {\n              model.TypeMail = true;\n            } else {\n              model.TypeMail = false;\n            }\n\n            model.Description = description;\n            model.Mail = email;\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(_getUserId());\n\n          case 12:\n            model.UserId = _context.sent;\n            model.WorkplaceId = workPlace.value;\n            setIsLoading(true);\n\n            if (!(title == \"Management Awareness\")) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.next = 18;\n            return _regeneratorRuntime.awrap(ReportService.sendMailAwareness(model));\n\n          case 18:\n            res = _context.sent;\n\n          case 19:\n            if (!(title == \"Sales & TC - Hourly\")) {\n              _context.next = 23;\n              break;\n            }\n\n            _context.next = 22;\n            return _regeneratorRuntime.awrap(ReportService.sendMailSalesAndTC(model));\n\n          case 22:\n            res = _context.sent;\n\n          case 23:\n            if (!(title == \"Revenue Management (Item)\")) {\n              _context.next = 27;\n              break;\n            }\n\n            _context.next = 26;\n            return _regeneratorRuntime.awrap(ReportService.sendMailRevenueManagament(model));\n\n          case 26:\n            res = _context.sent;\n\n          case 27:\n            if (!(title == \"Number Of TC (Item)\")) {\n              _context.next = 31;\n              break;\n            }\n\n            _context.next = 30;\n            return _regeneratorRuntime.awrap(ReportService.sendMailNumberOfTC(model));\n\n          case 30:\n            res = _context.sent;\n\n          case 31:\n            if (!(title == \"RevenueSummary\")) {\n              _context.next = 35;\n              break;\n            }\n\n            _context.next = 34;\n            return _regeneratorRuntime.awrap(ReportService.sendRevenueSummary(model));\n\n          case 34:\n            res = _context.sent;\n\n          case 35:\n            setIsLoading(false);\n\n            if (res.isSuccess == 1) {\n              onRequestSend();\n            }\n\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: visible,\n    statusBarTranslucent: true,\n    onRequestClose: function onRequestClose() {\n      _onRequestClose();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: [styles.containerModal],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.modal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.headerModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.textMain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, title)), React.createElement(View, {\n    style: styles.bodyInputModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: [styles.textTitleModal],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"Description\"), React.createElement(TextInput, {\n    multiline: true,\n    style: [styles.inputModal, {\n      height: 180,\n      textAlignVertical: \"top\"\n    }],\n    placeholder: \"Enter Text\",\n    placeholderTextColor: colors.gray,\n    value: description,\n    onChangeText: function onChangeText(text) {\n      return setDescription(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  })), React.createElement(View, {\n    style: styles.bodyInputModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.textTitleModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Send to email\"), React.createElement(TextInput, {\n    style: styles.inputModal,\n    placeholder: \"Enter email\",\n    placeholderTextColor: colors.gray,\n    value: email,\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    keyboardType: \"email-address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  })), isPickType && React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      marginTop: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      setValueRadioButton(\"excel\");\n    },\n    style: styles.radioButtonStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, React.createElement(SvgUri, {\n    source: valueRadioButton === \"excel\" ? Icons.iconRadioButton : Icons.iconRadioButtonOff,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }), React.createElement(Text, {\n    style: [styles.textButton, {\n      marginLeft: 10\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, \"Excel\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      setValueRadioButton(\"pdf\");\n    },\n    style: styles.radioButtonStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }, React.createElement(SvgUri, {\n    source: valueRadioButton === \"pdf\" ? Icons.iconRadioButton : Icons.iconRadioButtonOff,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }), React.createElement(Text, {\n    style: [styles.textButton, {\n      marginLeft: 10\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, \"PDF\"))), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      marginTop: 20,\n      marginBottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      _onRequestClose();\n    },\n    style: [styles.buttonSend, {\n      backgroundColor: \"#636363\",\n      flex: 1,\n      marginRight: 8\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.textButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }, \"Close\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      handleSend();\n    },\n    style: {\n      flex: 1,\n      marginLeft: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, React.createElement(LinearGradient, {\n    style: styles.buttonSend,\n    colors: [\"#DAB451\", \"#988050\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: styles.textButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }\n  }, \"Send\")))))), isLoading && React.createElement(DialogAwait, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 19\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  containerModal: {\n    backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  modal: {\n    backgroundColor: \"#414141\",\n    borderRadius: 4,\n    padding: 15,\n    width: \"90%\"\n  },\n  headerModal: {\n    borderBottomWidth: 0.5,\n    borderBottomColor: colors.colorLine,\n    paddingBottom: 15,\n    alignItems: \"center\"\n  },\n  textMain: {\n    color: \"#DAB451\",\n    fontWeight: \"500\",\n    alignItems: \"center\"\n  },\n  bodyInputModal: {\n    marginTop: 15\n  },\n  textTitleModal: {\n    fontWeight: \"600\",\n    color: colors.gray,\n    fontSize: 12,\n    marginBottom: 4\n  },\n  inputModal: {\n    borderRadius: 4,\n    backgroundColor: \"#303030\",\n    paddingHorizontal: 10,\n    color: colors.colorText,\n    paddingVertical: 8,\n    fontStyle: \"italic\",\n    fontWeight: \"300\"\n  },\n  textButton: {\n    fontSize: 16,\n    color: colors.colorText\n  },\n  buttonSend: {\n    height: 36,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: 4\n  },\n  radioButtonStyle: {\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 20\n  }\n});","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/components/management/items/modalSendEmail.tsx"],"names":["React","useState","colors","LinearGradient","ValidateEmail","SvgUri","Icons","ReportService","_getUserId","DialogAwait","useSelector","modalSendEmail","title","dateTime","visible","onRequestClose","onChangeText","onRequestSend","isPickType","state","workplace","workPlace","isLoading","setIsLoading","description","setDescription","email","setEmail","valueRadioButton","setValueRadioButton","model","handleSend","alert","DateTime","TypeMail","Description","Mail","UserId","WorkplaceId","value","sendMailAwareness","res","sendMailSalesAndTC","sendMailRevenueManagament","sendMailNumberOfTC","sendRevenueSummary","isSuccess","styles","containerModal","modal","headerModal","textMain","bodyInputModal","textTitleModal","inputModal","height","textAlignVertical","gray","text","flexDirection","marginTop","radioButtonStyle","iconRadioButton","iconRadioButtonOff","textButton","marginLeft","marginBottom","buttonSend","backgroundColor","flex","marginRight","StyleSheet","create","justifyContent","alignItems","borderRadius","padding","width","borderBottomWidth","borderBottomColor","colorLine","paddingBottom","color","fontWeight","fontSize","paddingHorizontal","colorText","paddingVertical","fontStyle"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TextInput,\r\n  Modal,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\n\r\nimport { colors } from \"../../../utils/Colors\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport { ValidateEmail } from \"../utils\";\r\nimport SvgUri from \"react-native-svg-uri\";\r\nimport { Icons } from \"../../../assets\";\r\nimport { ReportService } from \"../../../netWorking/SpeedposService\";\r\nimport { FilterViewModel } from \"../../../models/filterViewModel\";\r\nimport { _getUserId } from \"../../../netWorking/authService\";\r\nimport DialogAwait from \"../../../components/dialogs/Loading\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/reducers\";\r\nexport default function modalSendEmail({\r\n  title = \"Weekly Crew Schedule & OT Forecast Sample\",\r\n  dateTime,\r\n  visible,\r\n  onRequestClose,\r\n  onChangeText,\r\n  onRequestSend,\r\n  isPickType = false,\r\n}: {\r\n  title?: string;\r\n  dateTime?: string;\r\n  visible: boolean;\r\n  isPickType?: boolean;\r\n  onRequestClose: () => void;\r\n  onRequestSend?: () => void;\r\n  onChangeText?: (isVisible: boolean) => void;\r\n}) {\r\n  const { workPlace } = useSelector((state: RootState) => state.workplace);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [description, setDescription] = useState(`Dear [User Name],\r\n\r\nPlease find a copy of your report [Report Name] attached to this email\r\nThis is an auto-email, please do not reply to this email,\r\n  \r\nThank you\r\n  \r\nKind Regards\r\n  \r\nHTS App,  \r\n    `);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [valueRadioButton, setValueRadioButton] = useState(\"excel\");\r\n  let model: FilterViewModel = {};\r\n  const handleSend = async () => {\r\n    if (email === \"\") {\r\n      alert(\"Email cannot be blank!\");\r\n      return;\r\n    }\r\n    if (!ValidateEmail(email)) {\r\n      alert(\"Email invalid!\");\r\n      return;\r\n    }\r\n    model.DateTime = dateTime;\r\n    if (valueRadioButton == \"excel\") {\r\n      model.TypeMail = true;\r\n    } else {\r\n      model.TypeMail = false;\r\n    }\r\n    model.Description = description;\r\n    model.Mail = email;\r\n    model.UserId = await _getUserId();\r\n    model.WorkplaceId = workPlace.value;\r\n    let res;    \r\n    setIsLoading(true)\r\n    if (title == \"Management Awareness\") {\r\n      res = await ReportService.sendMailAwareness(model);\r\n    }\r\n    if (title == \"Sales & TC - Hourly\") {\r\n      res = await ReportService.sendMailSalesAndTC(model);\r\n    }\r\n\r\n    if (title == \"Revenue Management (Item)\") {\r\n      res = await ReportService.sendMailRevenueManagament(model);\r\n    }\r\n\r\n    if (title == \"Number Of TC (Item)\") {\r\n      res = await ReportService.sendMailNumberOfTC(model);\r\n    }\r\n    if (title == \"RevenueSummary\") {\r\n      res = await ReportService.sendRevenueSummary(model);\r\n    }\r\n    \r\n    setIsLoading(false)\r\n    \r\n    if (res.isSuccess == 1) {\r\n      onRequestSend();\r\n    }\r\n  };\r\n  return (\r\n    <Modal\r\n      animationType=\"slide\"\r\n      transparent={true}\r\n      visible={visible}\r\n      statusBarTranslucent={true}\r\n      onRequestClose={() => {\r\n        onRequestClose();\r\n      }}\r\n    >\r\n      <View style={[styles.containerModal]}>\r\n        <View style={styles.modal}>\r\n          <View style={styles.headerModal}>\r\n            <Text style={styles.textMain}>{title}</Text>\r\n          </View>\r\n          <View style={styles.bodyInputModal}>\r\n            <Text style={[styles.textTitleModal]}>Description</Text>\r\n            <TextInput\r\n              multiline\r\n              style={[\r\n                styles.inputModal,\r\n                { height: 180, textAlignVertical: \"top\" },\r\n              ]}\r\n              placeholder={\"Enter Text\"}\r\n              placeholderTextColor={colors.gray}\r\n              value={description}\r\n              onChangeText={text => setDescription(text)}\r\n            ></TextInput>\r\n          </View>\r\n          <View style={styles.bodyInputModal}>\r\n            <Text style={styles.textTitleModal}>Send to email</Text>\r\n            <TextInput\r\n              style={styles.inputModal}\r\n              placeholder={\"Enter email\"}\r\n              placeholderTextColor={colors.gray}\r\n              value={email}\r\n              onChangeText={text => setEmail(text)}\r\n              keyboardType={\"email-address\"}\r\n            ></TextInput>\r\n          </View>\r\n          {/* RadioButton */}\r\n          {isPickType && (\r\n            <View style={{ flexDirection: \"row\", marginTop: 15 }}>\r\n              <TouchableOpacity\r\n                onPress={() => {\r\n                  setValueRadioButton(\"excel\");\r\n                }}\r\n                style={styles.radioButtonStyle}\r\n              >\r\n                <SvgUri\r\n                  source={\r\n                    valueRadioButton === \"excel\"\r\n                      ? Icons.iconRadioButton\r\n                      : Icons.iconRadioButtonOff\r\n                  }\r\n                />\r\n                <Text style={[styles.textButton, { marginLeft: 10 }]}>\r\n                  Excel\r\n                </Text>\r\n              </TouchableOpacity>\r\n              <TouchableOpacity\r\n                onPress={() => {\r\n                  setValueRadioButton(\"pdf\");\r\n                }}\r\n                style={styles.radioButtonStyle}\r\n              >\r\n                <SvgUri\r\n                  source={\r\n                    valueRadioButton === \"pdf\"\r\n                      ? Icons.iconRadioButton\r\n                      : Icons.iconRadioButtonOff\r\n                  }\r\n                />\r\n                <Text style={[styles.textButton, { marginLeft: 10 }]}>PDF</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n          )}\r\n\r\n          {/* Button */}\r\n          <View\r\n            style={{ flexDirection: \"row\", marginTop: 20, marginBottom: 5 }}\r\n          >\r\n            <TouchableOpacity\r\n              onPress={() => {\r\n                onRequestClose();\r\n              }}\r\n              style={[\r\n                styles.buttonSend,\r\n                { backgroundColor: \"#636363\", flex: 1, marginRight: 8 },\r\n              ]}\r\n            >\r\n              <Text style={styles.textButton}>Close</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity\r\n              onPress={() => {\r\n                handleSend();\r\n              }}\r\n              style={{ flex: 1, marginLeft: 8 }}\r\n            >\r\n              <LinearGradient\r\n                style={styles.buttonSend}\r\n                colors={[\"#DAB451\", \"#988050\"]}\r\n              >\r\n                <Text style={styles.textButton}>Send</Text>\r\n              </LinearGradient>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n      </View>\r\n      {isLoading&&<DialogAwait></DialogAwait>}\r\n    </Modal>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  containerModal: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  modal: {\r\n    backgroundColor: \"#414141\",\r\n    borderRadius: 4,\r\n    padding: 15,\r\n    width: \"90%\",\r\n  },\r\n  headerModal: {\r\n    borderBottomWidth: 0.5,\r\n    borderBottomColor: colors.colorLine,\r\n    paddingBottom: 15,\r\n    alignItems: \"center\",\r\n  },\r\n  textMain: {\r\n    color: \"#DAB451\",\r\n    fontWeight: \"500\",\r\n    alignItems: \"center\",\r\n  },\r\n  bodyInputModal: {\r\n    marginTop: 15,\r\n  },\r\n  textTitleModal: {\r\n    fontWeight: \"600\",\r\n    color: colors.gray,\r\n    fontSize: 12,\r\n    marginBottom: 4,\r\n  },\r\n  inputModal: {\r\n    borderRadius: 4,\r\n    backgroundColor: \"#303030\",\r\n    paddingHorizontal: 10,\r\n    color: colors.colorText,\r\n    paddingVertical: 8,\r\n    fontStyle: \"italic\",\r\n    fontWeight: \"300\",\r\n  },\r\n\r\n  textButton: {\r\n    fontSize: 16,\r\n\r\n    color: colors.colorText,\r\n  },\r\n  buttonSend: {\r\n    height: 36,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 4,\r\n  },\r\n  radioButtonStyle: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    marginBottom: 20,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}