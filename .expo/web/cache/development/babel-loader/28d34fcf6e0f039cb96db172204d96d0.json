{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\angular\\\\hts_reactnative\\\\src\\\\app\\\\components\\\\Money\\\\index.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { _getCurrency } from \"../../netWorking/authService\";\nimport { colors } from \"../../utils/Colors\";\nexport default function Money(_ref) {\n  var data = _ref.data,\n      _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style;\n\n  var _useState = useState(\"0\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(\"0\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currencyMode = _useState4[0],\n      setCurrencyMode = _useState4[1];\n\n  var getValueCurrency = function getValueCurrency() {\n    var res;\n    return _regeneratorRuntime.async(function getValueCurrency$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(_getCurrency());\n\n          case 2:\n            res = _context.sent;\n            setCurrencyMode(res);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function convertK(value) {\n    var number = value / 1000;\n\n    if (Number.isInteger(number)) {\n      return number + \"k\";\n    } else {\n      return number.toFixed(2) + \"k\";\n    }\n  }\n\n  function convertM(value) {\n    var number = value / 1000000;\n\n    if (Number.isInteger(number)) {\n      return number + \"Mil\";\n    } else {\n      return number.toFixed(2) + \"Mil\";\n    }\n  }\n\n  function convertMoney(value) {\n    if (value) {\n      var str = value.toString().split(\".\");\n      str[0] = str[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n      return str.join(\".\");\n    }\n  }\n\n  function convertMoneyK(value) {\n    if (value) {\n      var str = value.split(\"k\");\n      str[0] = str[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n      return str.join(\"k\");\n    }\n  }\n\n  function convertMoneyM(value) {\n    if (value) {\n      var str = value.split(\"Mil\");\n      str[0] = str[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n      return str.join(\"Mil\");\n    }\n  }\n\n  useEffect(function () {\n    switch (currencyMode) {\n      case \"0\":\n        if (data) {\n          setValue(convertMoney(Math.round(data)));\n        }\n\n        break;\n\n      case \"1\":\n        if (data) {\n          setValue(convertMoneyK(convertK(Math.round(data))));\n        }\n\n        break;\n\n      case \"2\":\n        if (data) {\n          setValue(convertMoneyM(convertM(Math.round(data))));\n        }\n\n        break;\n\n      default:\n        if (data) {\n          var str = Math.round(data).toString().split(\".\");\n          str[0] = str[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n          setValue(str.join(\".\"));\n        }\n\n        break;\n    }\n  }, [currencyMode]);\n  useEffect(function () {\n    getValueCurrency();\n  }, []);\n  return React.createElement(Text, {\n    style: [{\n      color: colors.colorText\n    }, style],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }\n  }, value);\n}","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/components/Money/index.tsx"],"names":["React","useState","useEffect","_getCurrency","colors","Money","data","style","value","setValue","currencyMode","setCurrencyMode","getValueCurrency","res","convertK","number","Number","isInteger","toFixed","convertM","convertMoney","str","toString","split","replace","join","convertMoneyK","convertMoneyM","Math","round","color","colorText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,SAASC,YAAT;AACA,SAASC,MAAT;AAKA,eAAe,SAASC,KAAT,OAA4C;AAAA,MAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,wBAArBC,KAAqB;AAAA,MAArBA,KAAqB,2BAAb,EAAa;;AACzD,kBAA0BN,QAAQ,CAAC,GAAD,CAAlC;AAAA;AAAA,MAAOO,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAwCR,QAAQ,CAAC,GAAD,CAAhD;AAAA;AAAA,MAAOS,YAAP;AAAA,MAAqBC,eAArB;;AACA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACPT,YAAY,EADL;;AAAA;AACnBU,YAAAA,GADmB;AAEvBF,YAAAA,eAAe,CAACE,GAAD,CAAf;;AAFuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAIA,WAASC,QAAT,CAAkBN,KAAlB,EAAiC;AAC/B,QAAIO,MAAM,GAAGP,KAAK,GAAG,IAArB;;AACA,QAAIQ,MAAM,CAACC,SAAP,CAAiBF,MAAjB,CAAJ,EAA8B;AAC5B,aAAUA,MAAV;AACD,KAFD,MAEO;AACL,aAAUA,MAAM,CAACG,OAAP,CAAe,CAAf,CAAV;AACD;AACF;;AACD,WAASC,QAAT,CAAkBX,KAAlB,EAAiC;AAC/B,QAAIO,MAAM,GAAGP,KAAK,GAAG,OAArB;;AACA,QAAIQ,MAAM,CAACC,SAAP,CAAiBF,MAAjB,CAAJ,EAA8B;AAC5B,aAAUA,MAAV;AACD,KAFD,MAEO;AACL,aAAUA,MAAM,CAACG,OAAP,CAAe,CAAf,CAAV;AACD;AACF;;AACD,WAASE,YAAT,CAAsBZ,KAAtB,EAAqC;AACnC,QAAIA,KAAJ,EAAW;AACT,UAAMa,GAAG,GAAGb,KAAK,CAACc,QAAN,GAAiBC,KAAjB,CAAuB,GAAvB,CAAZ;AACAF,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOG,OAAP,CAAe,uBAAf,EAAwC,GAAxC,CAAT;AACA,aAAOH,GAAG,CAACI,IAAJ,CAAS,GAAT,CAAP;AACD;AACF;;AACD,WAASC,aAAT,CAAuBlB,KAAvB,EAAsC;AACpC,QAAIA,KAAJ,EAAW;AACT,UAAMa,GAAG,GAAGb,KAAK,CAACe,KAAN,CAAY,GAAZ,CAAZ;AACAF,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOG,OAAP,CAAe,uBAAf,EAAwC,GAAxC,CAAT;AACA,aAAOH,GAAG,CAACI,IAAJ,CAAS,GAAT,CAAP;AACD;AACF;;AACD,WAASE,aAAT,CAAuBnB,KAAvB,EAAsC;AACpC,QAAIA,KAAJ,EAAW;AACT,UAAMa,GAAG,GAAGb,KAAK,CAACe,KAAN,CAAY,KAAZ,CAAZ;AACAF,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOG,OAAP,CAAe,uBAAf,EAAwC,GAAxC,CAAT;AACA,aAAOH,GAAG,CAACI,IAAJ,CAAS,KAAT,CAAP;AACD;AACF;;AAEDvB,EAAAA,SAAS,CAAC,YAAM;AACd,YAAQQ,YAAR;AACE,WAAK,GAAL;AACE,YAAIJ,IAAJ,EAAU;AACRG,UAAAA,QAAQ,CAACW,YAAY,CAACQ,IAAI,CAACC,KAAL,CAAWvB,IAAX,CAAD,CAAb,CAAR;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIA,IAAJ,EAAU;AACRG,UAAAA,QAAQ,CAACiB,aAAa,CAACZ,QAAQ,CAACc,IAAI,CAACC,KAAL,CAAWvB,IAAX,CAAD,CAAT,CAAd,CAAR;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIA,IAAJ,EAAU;AACRG,UAAAA,QAAQ,CAACkB,aAAa,CAACR,QAAQ,CAACS,IAAI,CAACC,KAAL,CAAWvB,IAAX,CAAD,CAAT,CAAd,CAAR;AACD;;AACD;;AAEF;AACE,YAAIA,IAAJ,EAAU;AACR,cAAMe,GAAG,GAAGO,IAAI,CAACC,KAAL,CAAWvB,IAAX,EAAiBgB,QAAjB,GAA4BC,KAA5B,CAAkC,GAAlC,CAAZ;AACAF,UAAAA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOG,OAAP,CAAe,uBAAf,EAAwC,GAAxC,CAAT;AACAf,UAAAA,QAAQ,CAACY,GAAG,CAACI,IAAJ,CAAS,GAAT,CAAD,CAAR;AACD;;AACD;AAzBJ;AA2BD,GA5BQ,EA4BN,CAACf,YAAD,CA5BM,CAAT;AA6BAR,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,gBAAgB;AACjB,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAO,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAC;AAAEkB,MAAAA,KAAK,EAAE1B,MAAM,CAAC2B;AAAhB,KAAD,EAA8BxB,KAA9B,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoDC,KAApD,CAAP;AACD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Text, StyleProp, TextStyle } from \"react-native\";\r\nimport { _getCurrency } from \"../../netWorking/authService\";\r\nimport { colors } from \"../../utils/Colors\";\r\ninterface props {\r\n  data: number;\r\n  style?: StyleProp<TextStyle>;\r\n}\r\nexport default function Money({ data, style = {} }: props) {\r\n  const [value, setValue] = useState(\"0\");\r\n  const [currencyMode, setCurrencyMode] = useState(\"0\");\r\n  const getValueCurrency = async () => {\r\n    let res = await _getCurrency();\r\n    setCurrencyMode(res);\r\n  };\r\n  function convertK(value: number) {\r\n    let number = value / 1000;\r\n    if (Number.isInteger(number)) {\r\n      return `${number}k`;\r\n    } else {\r\n      return `${number.toFixed(2)}k`;\r\n    }\r\n  }\r\n  function convertM(value: number) {\r\n    let number = value / 1000000;\r\n    if (Number.isInteger(number)) {\r\n      return `${number}Mil`;\r\n    } else {\r\n      return `${number.toFixed(2)}Mil`;\r\n    }\r\n  }\r\n  function convertMoney(value: number) {\r\n    if (value) {\r\n      const str = value.toString().split(\".\");\r\n      str[0] = str[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n      return str.join(\".\");\r\n    }\r\n  }\r\n  function convertMoneyK(value: string) {\r\n    if (value) {\r\n      const str = value.split(\"k\");\r\n      str[0] = str[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n      return str.join(\"k\");\r\n    }\r\n  }\r\n  function convertMoneyM(value: string) {\r\n    if (value) {\r\n      const str = value.split(\"Mil\");\r\n      str[0] = str[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n      return str.join(\"Mil\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    switch (currencyMode) {\r\n      case \"0\":\r\n        if (data) {\r\n          setValue(convertMoney(Math.round(data)));\r\n        }\r\n        break;\r\n\r\n      case \"1\":\r\n        if (data) {\r\n          setValue(convertMoneyK(convertK(Math.round(data))));\r\n        }\r\n        break;\r\n\r\n      case \"2\":\r\n        if (data) {\r\n          setValue(convertMoneyM(convertM(Math.round(data))));\r\n        }\r\n        break;\r\n\r\n      default:\r\n        if (data) {\r\n          const str = Math.round(data).toString().split(\".\");\r\n          str[0] = str[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n          setValue(str.join(\".\"));\r\n        }\r\n        break;\r\n    }\r\n  }, [currencyMode]);\r\n  useEffect(() => {\r\n    getValueCurrency();\r\n  }, []);\r\n  return <Text style={[{ color: colors.colorText }, style]}>{value}</Text>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}