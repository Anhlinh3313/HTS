{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { fetchAPIPost } from \"./baseService\";\nexport var OwnerHighLevelService = function () {\n  function OwnerHighLevelService() {\n    _classCallCheck(this, OwnerHighLevelService);\n  }\n\n  _createClass(OwnerHighLevelService, null, [{\n    key: \"ReportRevenueYear\",\n    value: function ReportRevenueYear(model) {\n      var data;\n      return _regeneratorRuntime.async(function ReportRevenueYear$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Report/ReportRevenueYear\",\n                body: model\n              }));\n\n            case 2:\n              data = _context.sent;\n              return _context.abrupt(\"return\", data.data);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"ReportRevenueDate\",\n    value: function ReportRevenueDate(model) {\n      var data;\n      return _regeneratorRuntime.async(function ReportRevenueDate$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Report/ReportRevenueDate\",\n                body: model\n              }));\n\n            case 2:\n              data = _context2.sent;\n              return _context2.abrupt(\"return\", data.data);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"ReportRevenueDaily\",\n    value: function ReportRevenueDaily(model) {\n      var data;\n      return _regeneratorRuntime.async(function ReportRevenueDaily$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Report/ReportRevenueDaily\",\n                body: model\n              }));\n\n            case 2:\n              data = _context3.sent;\n              return _context3.abrupt(\"return\", data.data);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"ReportRevenueMonthly\",\n    value: function ReportRevenueMonthly(model) {\n      var data;\n      return _regeneratorRuntime.async(function ReportRevenueMonthly$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Report/ReportRevenueMonthly\",\n                body: model\n              }));\n\n            case 2:\n              data = _context4.sent;\n              return _context4.abrupt(\"return\", data.data);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return OwnerHighLevelService;\n}();","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/netWorking/ownerHighLevel.tsx"],"names":["fetchAPIPost","OwnerHighLevelService","model","url","body","data"],"mappings":";;;AAMA,SAAsBA,YAAtB;AAEA,WAAaC,qBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WAEI,2BAAsCC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACqBF,YAAY,CAAC;AAAEG,gBAAAA,GAAG,iCAAL;AAAuCC,gBAAAA,IAAI,EAACF;AAA5C,eAAD,CADjC;;AAAA;AACQG,cAAAA,IADR;AAAA,+CAEWA,IAAI,CAACA,IAFhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA,WAOI,2BAAsCH,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACqBF,YAAY,CAAC;AAAEG,gBAAAA,GAAG,iCAAL;AAAuCC,gBAAAA,IAAI,EAACF;AAA5C,eAAD,CADjC;;AAAA;AACQG,cAAAA,IADR;AAAA,gDAEWA,IAAI,CAACA,IAFhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA,WAYI,4BAAuCH,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACqBF,YAAY,CAAC;AAAEG,gBAAAA,GAAG,kCAAL;AAAwCC,gBAAAA,IAAI,EAACF;AAA7C,eAAD,CADjC;;AAAA;AACQG,cAAAA,IADR;AAAA,gDAEWA,IAAI,CAACA,IAFhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZJ;AAAA;AAAA,WAiBI,8BAAyCH,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACqBF,YAAY,CAAC;AAAEG,gBAAAA,GAAG,oCAAL;AAA0CC,gBAAAA,IAAI,EAACF;AAA/C,eAAD,CADjC;;AAAA;AACQG,cAAAA,IADR;AAAA,gDAEWA,IAAI,CAACA,IAFhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBJ;;AAAA;AAAA","sourcesContent":["import { IProductModel } from \"../models/IproductModel\";\r\nimport { IResponseModel } from \"../models/IResponseModel\";\r\nimport { PoitRevenueDateModel } from \"../models/PointRevenueDateModel\";\r\nimport { RevenueDateModel } from \"../models/revenueDateModel\";\r\nimport { RevenueMonthlyModel } from \"../models/RevenueMonthly\";\r\nimport { RevenueYearModel } from \"../models/revenueYearModel\";\r\nimport { fetchAPIGet, fetchAPIPost } from \"./baseService\";\r\n\r\nexport class OwnerHighLevelService {\r\n\r\n    public static async ReportRevenueYear(model:any): Promise<RevenueYearModel[]> {\r\n        let data = await fetchAPIPost({ url: `/api/Report/ReportRevenueYear`,body:model}) as IResponseModel;\r\n        return data.data;\r\n    }\r\n    \r\n    public static async ReportRevenueDate(model:any): Promise<PoitRevenueDateModel> {\r\n        let data = await fetchAPIPost({ url: `/api/Report/ReportRevenueDate`,body:model}) as IResponseModel;\r\n        return data.data;\r\n    }\r\n\r\n    public static async ReportRevenueDaily(model:any): Promise<RevenueMonthlyModel> {\r\n        let data = await fetchAPIPost({ url: `/api/Report/ReportRevenueDaily`,body:model}) as IResponseModel;\r\n        return data.data;\r\n    }\r\n\r\n    public static async ReportRevenueMonthly(model:any): Promise<RevenueMonthlyModel> {\r\n        let data = await fetchAPIPost({ url: `/api/Report/ReportRevenueMonthly`,body:model}) as IResponseModel;\r\n        return data.data;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}