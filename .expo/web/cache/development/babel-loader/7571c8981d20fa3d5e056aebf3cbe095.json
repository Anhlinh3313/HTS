{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\angular\\\\hts_reactnative\\\\App.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useRef } from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { Navigation } from \"./src/app/navigations/navigation\";\nimport { colors } from \"./src/app/utils/Colors\";\nimport { Provider } from \"react-redux\";\nimport store from \"./src/app/redux/store\";\nimport * as Notifications from \"expo-notifications\";\nimport * as Font from \"expo-font\";\nimport { LogBox } from \"react-native-web/dist/index\";\nLogBox.ignoreLogs(['Setting a timer']);\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: true,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    \"Poppins-Bold\": require(\"./assets/fonts/Poppins-Bold.ttf\"),\n    \"Poppins-Semibold\": require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\n    \"Poppins-Regular\": require(\"./assets/fonts/Poppins-Regular.ttf\")\n  });\n};\n\nvar App = function App() {\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    fetchFonts();\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {});\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {});\n    return function () {\n      notificationListener.current && Notifications.removeNotificationSubscription(notificationListener.current);\n      responseListener.current && Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n  var isDarkMode = useColorScheme() === \"dark\";\n  return React.createElement(Provider, {\n    store: store,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, React.createElement(StatusBar, {\n    barStyle: \"light-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), React.createElement(Navigation, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.backgroundApp\n  }\n});","map":{"version":3,"sources":["D:/angular/hts_reactnative/App.tsx"],"names":["React","useEffect","useRef","Navigation","colors","Provider","store","Notifications","Font","LogBox","ignoreLogs","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","fetchFonts","loadAsync","require","App","notificationListener","responseListener","current","addNotificationReceivedListener","notification","addNotificationResponseReceivedListener","response","removeNotificationSubscription","isDarkMode","useColorScheme","styles","container","StyleSheet","create","flex","backgroundColor","backgroundApp"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAmD,OAAnD;;;;;AAEA,SAASC,UAAT;AACA,SAASC,MAAT;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP;AAEA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;SAESC,M;AAETA,MAAM,CAACC,UAAP,CAAkB,CAAC,iBAAD,CAAlB;AACAH,aAAa,CAACI,sBAAd,CAAqC;AACnCC,EAAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAa;AAC/BC,cAAAA,eAAe,EAAE,IADc;AAE/BC,cAAAA,eAAe,EAAE,IAFc;AAG/BC,cAAAA,cAAc,EAAE;AAHe,aAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADe,CAArC;;AAOA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,SAAOR,IAAI,CAACS,SAAL,CAAe;AACpB,oBAAgBC,OAAO,mCADH;AAEpB,wBAAoBA,OAAO,uCAFP;AAGpB,uBAAmBA,OAAO;AAHN,GAAf,CAAP;AAKD,CAND;;AAOA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAChB,MAAMC,oBAAoB,GAAGlB,MAAM,EAAnC;AACA,MAAMmB,gBAAgB,GAAGnB,MAAM,EAA/B;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,UAAU;AAEVI,IAAAA,oBAAoB,CAACE,OAArB,GAA+Bf,aAAa,CAACgB,+BAAd,CAA8C,UAAAC,YAAY,EAAI,CAC5F,CAD8B,CAA/B;AAGAH,IAAAA,gBAAgB,CAACC,OAAjB,GAA2Bf,aAAa,CAACkB,uCAAd,CAAsD,UAAAC,QAAQ,EAAI,CAC5F,CAD0B,CAA3B;AAGA,WAAO,YAAM;AACXN,MAAAA,oBAAoB,CAACE,OAArB,IAAgCf,aAAa,CAACoB,8BAAd,CAA6CP,oBAAoB,CAACE,OAAlE,CAAhC;AACAD,MAAAA,gBAAgB,CAACC,OAAjB,IAA4Bf,aAAa,CAACoB,8BAAd,CAA6CN,gBAAgB,CAACC,OAA9D,CAA5B;AACD,KAHD;AAID,GAbQ,EAaN,EAbM,CAAT;AAeA,MAAMM,UAAU,GAAGC,cAAc,OAAO,MAAxC;AACA,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEvB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEwB,MAAM,CAACC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAE,eAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF;AAQD,CA5BD;;AA8BA,eAAeZ,GAAf;AACA,IAAMW,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE/B,MAAM,CAACgC;AAFf;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { SafeAreaView, useColorScheme, StyleSheet, StatusBar, Platform } from \"react-native\";\r\nimport { Navigation } from \"./src/app/navigations/navigation\";\r\nimport { colors } from \"./src/app/utils/Colors\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./src/app/redux/store\";\r\nimport Constants from \"expo-constants\";\r\nimport * as Notifications from \"expo-notifications\";\r\nimport { Subscription } from \"@unimodules/core\";\r\nimport * as Font from \"expo-font\";\r\n// import { AppLoading } from 'expo';\r\nimport { LogBox } from 'react-native';\r\n\r\nLogBox.ignoreLogs(['Setting a timer']);\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: true,\r\n    shouldSetBadge: false,\r\n  }),\r\n});\r\nconst fetchFonts = () => {\r\n  return Font.loadAsync({\r\n    \"Poppins-Bold\": require(\"./assets/fonts/Poppins-Bold.ttf\"),\r\n    \"Poppins-Semibold\": require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\r\n    \"Poppins-Regular\": require(\"./assets/fonts/Poppins-Regular.ttf\"),\r\n  });\r\n};\r\nconst App = () => {\r\n  const notificationListener = useRef<Subscription>();\r\n  const responseListener = useRef<Subscription>();\r\n\r\n  useEffect(() => {\r\n    fetchFonts()\r\n\r\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n    });\r\n\r\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n    });\r\n\r\n    return () => {\r\n      notificationListener.current && Notifications.removeNotificationSubscription(notificationListener.current);\r\n      responseListener.current && Notifications.removeNotificationSubscription(responseListener.current);\r\n    };\r\n  }, []);\r\n\r\n  const isDarkMode = useColorScheme() === \"dark\";\r\n  return (\r\n    <Provider store={store}>\r\n      <SafeAreaView style={styles.container}>\r\n        <StatusBar barStyle={\"light-content\"} />\r\n        <Navigation />\r\n      </SafeAreaView>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: colors.backgroundApp,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}