{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Environment } from \"../environment\";\nimport { _getToken } from \"./authService\";\nvar url = Environment.apiPost;\nexport var transactionHeader = function transactionHeader(_stringDateFrom, _stringDateTo, _memCode, _transact) {\n  var token, response, json;\n  return _regeneratorRuntime.async(function transactionHeader$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 2:\n          token = _context.sent;\n          _context.prev = 3;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fetch(url + '/api/Speedpos/TransactionHeader', {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Authorization': token ? \"Bearer \" + token : ''\n            },\n            body: JSON.stringify({\n              StringDateFrom: _stringDateFrom,\n              StringDateTo: _stringDateTo,\n              MemCode: _memCode,\n              Transact: _transact\n            })\n          }));\n\n        case 6:\n          response = _context.sent;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 9:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](3);\n          console.error(_context.t0);\n          return _context.abrupt(\"return\", _context.t0);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[3, 13]], Promise);\n};\nexport var getTotalTransactionHeader = function getTotalTransactionHeader(_dateFrom, _dateTo) {\n  var token, response, json;\n  return _regeneratorRuntime.async(function getTotalTransactionHeader$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 2:\n          token = _context2.sent;\n          _context2.prev = 3;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(fetch(url + '/api/Estimate/GetTotalTransactionHeader', {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Authorization': token ? \"Bearer \" + token : ''\n            },\n            body: JSON.stringify({\n              DateFrom: _dateFrom,\n              DateTo: _dateTo\n            })\n          }));\n\n        case 6:\n          response = _context2.sent;\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 9:\n          json = _context2.sent;\n          return _context2.abrupt(\"return\", json);\n\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2[\"catch\"](3);\n          console.error(_context2.t0);\n          return _context2.abrupt(\"return\", _context2.t0);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[3, 13]], Promise);\n};","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/netWorking/transactionHeaderService.tsx"],"names":["Environment","_getToken","url","apiPost","transactionHeader","_stringDateFrom","_stringDateTo","_memCode","_transact","token","fetch","method","headers","body","JSON","stringify","StringDateFrom","StringDateTo","MemCode","Transact","response","json","console","error","getTotalTransactionHeader","_dateFrom","_dateTo","DateFrom","DateTo"],"mappings":";AAAA,SAASA,WAAT;AACA,SAASC,SAAT;AACA,IAAIC,GAAG,GAAGF,WAAW,CAACG,OAAtB;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAOC,eAAP,EAA6BC,aAA7B,EAAiDC,QAAjD,EAAgEC,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACTP,SAAS,EADA;;AAAA;AACvBQ,UAAAA,KADuB;AAAA;AAAA;AAAA,2CAGJC,KAAK,CAACR,GAAG,GAAG,iCAAP,EAA0C;AAChES,YAAAA,MAAM,EAAE,MADwD;AAEhEC,YAAAA,OAAO,EAAE;AACL,wBAAU,kBADL;AAEL,8BAAgB,kBAFX;AAGL,+BAAiBH,KAAK,eAAaA,KAAb,GAAuB;AAHxC,aAFuD;AAOhEI,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,cAAAA,cAAc,EAAEX,eADC;AAEjBY,cAAAA,YAAY,EAAEX,aAFG;AAGjBY,cAAAA,OAAO,EAAEX,QAHQ;AAIjBY,cAAAA,QAAQ,EAAEX;AAJO,aAAf;AAP0D,WAA1C,CAHD;;AAAA;AAGrBY,UAAAA,QAHqB;AAAA;AAAA,2CAiBRA,QAAQ,CAACC,IAAT,EAjBQ;;AAAA;AAiBrBA,UAAAA,IAjBqB;AAAA,2CAkBlBA,IAlBkB;;AAAA;AAAA;AAAA;AAoBzBC,UAAAA,OAAO,CAACC,KAAR;AApByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;AAyBP,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAOC,SAAP,EAAuBC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACjBzB,SAAS,EADQ;;AAAA;AAC/BQ,UAAAA,KAD+B;AAAA;AAAA;AAAA,2CAGZC,KAAK,CAACR,GAAG,GAAG,yCAAP,EAAkD;AACxES,YAAAA,MAAM,EAAE,MADgE;AAExEC,YAAAA,OAAO,EAAE;AACL,wBAAU,kBADL;AAEL,8BAAgB,kBAFX;AAGL,+BAAiBH,KAAK,eAAaA,KAAb,GAAuB;AAHxC,aAF+D;AAOxEI,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBY,cAAAA,QAAQ,EAAEF,SADO;AAEjBG,cAAAA,MAAM,EAAEF;AAFS,aAAf;AAPkE,WAAlD,CAHO;;AAAA;AAG7BN,UAAAA,QAH6B;AAAA;AAAA,2CAehBA,QAAQ,CAACC,IAAT,EAfgB;;AAAA;AAe7BA,UAAAA,IAf6B;AAAA,4CAgB1BA,IAhB0B;;AAAA;AAAA;AAAA;AAkBjCC,UAAAA,OAAO,CAACC,KAAR;AAlBiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlC","sourcesContent":["import { Environment } from \"../environment\";\r\nimport { _getToken } from \"./authService\";\r\nlet url = Environment.apiPost;\r\n\r\nexport const transactionHeader = async (_stringDateFrom: any, _stringDateTo: any, _memCode: any, _transact: any) => {\r\n    const token = await _getToken();\r\n    try {\r\n        let response = await fetch(url + '/api/Speedpos/TransactionHeader', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token ? `Bearer ${token}` : '',\r\n            },\r\n            body: JSON.stringify({\r\n                StringDateFrom: _stringDateFrom,\r\n                StringDateTo: _stringDateTo,\r\n                MemCode: _memCode,\r\n                Transact: _transact\r\n            })\r\n        })\r\n        let json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        console.error(error);\r\n        return (error);\r\n    }\r\n}\r\n\r\nexport const getTotalTransactionHeader = async (_dateFrom: any, _dateTo: any) => {\r\n    const token = await _getToken()\r\n    try {\r\n        let response = await fetch(url + '/api/Estimate/GetTotalTransactionHeader', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token ? `Bearer ${token}` : '',\r\n            },\r\n            body: JSON.stringify({\r\n                DateFrom: _dateFrom,\r\n                DateTo: _dateTo\r\n            })\r\n        })\r\n        let json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        console.error(error);\r\n        return (error);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}