{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport function getToken(username, password) {\n  return _regeneratorRuntime.async(function getToken$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            fetch(\"https://backend.eoh.io/api/accounts/login/\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              method: \"POST\",\n              body: JSON.stringify({\n                username: username,\n                password: password\n              })\n            }).then(function _callee(response) {\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      if (!(response.status === 200)) {\n                        _context.next = 4;\n                        break;\n                      }\n\n                      _context.next = 3;\n                      return _regeneratorRuntime.awrap(response.json());\n\n                    case 3:\n                      return _context.abrupt(\"return\", _context.sent);\n\n                    case 4:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }).then(function _callee2(responseJson) {\n              return _regeneratorRuntime.async(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      resolve(responseJson);\n\n                    case 1:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }).catch(function (error) {\n              resolve(null);\n              alert(\"\" + error.message);\n              reject(error);\n            });\n          }));\n\n        case 2:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/netWorking/eohService.ts"],"names":["getToken","username","password","Promise","resolve","reject","fetch","headers","Accept","method","body","JSON","stringify","then","response","status","json","responseJson","catch","error","alert","message"],"mappings":";AAAA,OAAO,SAAeA,QAAf,CAAwBC,QAAxB,EAA0CC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEQ,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC5CC,YAAAA,KAAK,+CAA+C;AAClDC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAE,kBADD;AAEP,gCAAgB;AAFT,eADyC;AAKlDC,cAAAA,MAAM,EAAE,MAL0C;AAMlDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBX,gBAAAA,QAAQ,EAARA,QADmB;AAEnBC,gBAAAA,QAAQ,EAARA;AAFmB,eAAf;AAN4C,aAA/C,CAAL,CAWGW,IAXH,CAWQ,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA,4BACAA,QAAQ,CAACC,MAAT,KAAoB,GADpB;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAEWD,QAAQ,CAACE,IAAT,EAFX;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAXR,EAgBGH,IAhBH,CAgBQ,kBAAMI,YAAN;AAAA;AAAA;AAAA;AAAA;AACJb,sBAAAA,OAAO,CAACa,YAAD,CAAP;;AADI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAhBR,EAmBGC,KAnBH,CAmBS,UAAAC,KAAK,EAAI;AACdf,cAAAA,OAAO,CAAC,IAAD,CAAP;AACAgB,cAAAA,KAAK,MAAID,KAAK,CAACE,OAAV,CAAL;AACAhB,cAAAA,MAAM,CAACc,KAAD,CAAN;AACD,aAvBH;AAwBD,WAzBY,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["export async function getToken(username: string, password: string) {\r\n  // const token = await _getToken();\r\n  return await new Promise((resolve, reject) => {\r\n    fetch(`https://backend.eoh.io/api/accounts/login/`, {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        username,\r\n        password,\r\n      }),\r\n    })\r\n      .then(async response => {\r\n        if (response.status === 200) {\r\n          return await response.json();\r\n        }\r\n      })\r\n      .then(async responseJson => {\r\n        resolve(responseJson);\r\n      })\r\n      .catch(error => {\r\n        resolve(null);\r\n        alert(`${error.message}`);\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}