{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\angular\\\\hts_reactnative\\\\src\\\\app\\\\screens\\\\loginScreen.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { Images, Icons } from \"../assets\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { useState, useEffect } from 'react';\nimport { colors } from \"../utils/Colors\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { loginAsync, _getAccount } from \"../netWorking/authService\";\nimport { UserService } from \"../netWorking/userService\";\nimport { getToken } from \"../netWorking/eohService\";\nimport SvgUri from \"react-native-svg-uri\";\nimport DialogAwait from \"../components/dialogs/dialogAwait\";\nimport * as LocalAuthentication from 'expo-local-authentication';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useDispatch } from \"react-redux\";\nimport Constants from \"expo-constants\";\nimport * as Notifications from \"expo-notifications\";\nexport default function LoginScreen(props) {\n  var dispatch = useDispatch();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      typeBiometric = _useState2[0],\n      setTypeBiometric = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isEnrolled = _useState4[0],\n      setIsEnrolled = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isSecurity = _useState6[0],\n      setIsSecurity = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isSubmit = _useState8[0],\n      setIssubmit = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isShowPass = _useState10[0],\n      setShowPass = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      phonenumber = _useState12[0],\n      setPhonenumber = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      password = _useState14[0],\n      setPassword = _useState14[1];\n\n  var _useState15 = useState(''),\n      _useState16 = _slicedToArray(_useState15, 2),\n      txtErrorPhone = _useState16[0],\n      setTxtErrorPhone = _useState16[1];\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      txtErrorPass = _useState18[0],\n      setTxtErrorPass = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      isFocusPhone = _useState20[0],\n      setIsFocusPhone = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      isFocusPass = _useState22[0],\n      setIsFocusPass = _useState22[1];\n\n  function registerForPushNotificationsAsync() {\n    var token, tokenDevice, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n    return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!Constants.isDevice) {\n              _context.next = 23;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n          case 3:\n            _await$Notifications$ = _context.sent;\n            existingStatus = _await$Notifications$.status;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus !== \"granted\")) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n          case 9:\n            _await$Notifications$2 = _context.sent;\n            status = _await$Notifications$2.status;\n            finalStatus = status;\n\n          case 12:\n            if (!(finalStatus !== \"granted\")) {\n              _context.next = 15;\n              break;\n            }\n\n            alert(\"Failed to get push token for push notification!\");\n            return _context.abrupt(\"return\");\n\n          case 15:\n            _context.next = 17;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 17:\n            token = _context.sent.data;\n            _context.next = 20;\n            return _regeneratorRuntime.awrap(Notifications.getDevicePushTokenAsync());\n\n          case 20:\n            tokenDevice = _context.sent.data;\n            _context.next = 24;\n            break;\n\n          case 23:\n            alert(\"Must use physical device for Push Notifications\");\n\n          case 24:\n            if (Platform.OS === \"android\") {\n              Notifications.setNotificationChannelAsync(\"default\", {\n                name: \"default\",\n                importance: Notifications.AndroidImportance.MAX,\n                vibrationPattern: [0, 250, 250, 250],\n                lightColor: \"#FF231F7C\"\n              });\n            }\n\n            return _context.abrupt(\"return\", token);\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function _getAsyncStorage() {\n    var res;\n    return _regeneratorRuntime.async(function _getAsyncStorage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('security'));\n\n          case 3:\n            res = _context2.sent;\n            if (res !== null) setIsSecurity(!!+res);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", _context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }\n\n  var onChangePhoneNumber = function onChangePhoneNumber(value) {\n    setPhonenumber(value);\n\n    if (value && phonenumber) {\n      setTxtErrorPhone('');\n    }\n  };\n\n  var onChangePass = function onChangePass(value) {\n    setPassword(value);\n\n    if (value && password) {\n      setTxtErrorPass('');\n    }\n  };\n\n  var clearInput = function clearInput() {\n    setPhonenumber('');\n    setPassword('');\n    setTxtErrorPhone('');\n    setTxtErrorPass('');\n  };\n\n  var onSubmit = function onSubmit() {\n    var validate, res, auth, tokenDevice, resFireBase;\n    return _regeneratorRuntime.async(function onSubmit$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            validate = validateForm();\n            alert(validate);\n\n            if (!validate) {\n              _context3.next = 26;\n              break;\n            }\n\n            setIssubmit(true);\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(loginAsync(phonenumber, password));\n\n          case 6:\n            res = _context3.sent;\n\n            if (!res) {\n              _context3.next = 25;\n              break;\n            }\n\n            if (!((res == null ? void 0 : res.isSuccess) == '1')) {\n              _context3.next = 24;\n              break;\n            }\n\n            _context3.next = 11;\n            return _regeneratorRuntime.awrap(getToken('0399338390', 'RgWhhm^xC@xdQ68N'));\n\n          case 11:\n            auth = _context3.sent;\n\n            if (auth) {\n              dispatch({\n                type: \"GET_ACCOUNT\",\n                payload: auth\n              });\n            }\n\n            _context3.next = 15;\n            return _regeneratorRuntime.awrap(registerForPushNotificationsAsync());\n\n          case 15:\n            tokenDevice = _context3.sent;\n            _context3.next = 18;\n            return _regeneratorRuntime.awrap(UserService.updateFireBaseToken({\n              FireBaseToken: tokenDevice\n            }));\n\n          case 18:\n            resFireBase = _context3.sent;\n            onGetMenuAccess(res.data.userId);\n            clearInput();\n            props.navigation.replace(\"Main\");\n            _context3.next = 25;\n            break;\n\n          case 24:\n            setTxtErrorPhone(res == null ? void 0 : res.message);\n\n          case 25:\n            setIssubmit(false);\n\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var validateForm = function validateForm() {\n    if (phonenumber === '') {\n      setTxtErrorPhone(\"PhoneNumber or Email cannot be blank!\");\n      return false;\n    }\n\n    if (password === '') {\n      setTxtErrorPass(\"Password cannot be blank!\");\n      return false;\n    }\n\n    if (password.length < 6) {\n      setTxtErrorPass(\"Invalid password!\");\n      return false;\n    }\n\n    return true;\n  };\n\n  var onGetMenuAccess = function onGetMenuAccess(id) {\n    var response, _payload;\n\n    return _regeneratorRuntime.async(function onGetMenuAccess$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(UserService.getMenuByUserId(id));\n\n          case 2:\n            response = _context4.sent;\n\n            if (response.isSuccess == 1) {\n              _payload = [];\n              response.data.map(function (item) {\n                if (item.isEnabled && item.isAccess) {\n                  _payload.push(item);\n                }\n              });\n              dispatch({\n                type: \"GET_ACCESS\",\n                payload: _payload\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onAuth = function onAuth() {\n    var acc, results, res, auth, tokenDevice, resFireBase;\n    return _regeneratorRuntime.async(function onAuth$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(_getAccount());\n\n          case 2:\n            acc = _context5.sent;\n\n            if (!(acc.password == null || acc.username == null)) {\n              _context5.next = 6;\n              break;\n            }\n\n            alert('Please login for the first time to use TouchId / FaceId.');\n            return _context5.abrupt(\"return\");\n\n          case 6:\n            if (isEnrolled) {\n              _context5.next = 9;\n              break;\n            }\n\n            alert('Biometric record not found, please verify your identity with your password.');\n            return _context5.abrupt(\"return\");\n\n          case 9:\n            _context5.prev = 9;\n            _context5.next = 12;\n            return _regeneratorRuntime.awrap(LocalAuthentication.authenticateAsync());\n\n          case 12:\n            results = _context5.sent;\n\n            if (!results.success) {\n              _context5.next = 39;\n              break;\n            }\n\n            setIssubmit(true);\n            _context5.next = 17;\n            return _regeneratorRuntime.awrap(loginAsync(acc.username, acc.password));\n\n          case 17:\n            res = _context5.sent;\n\n            if (!res) {\n              _context5.next = 36;\n              break;\n            }\n\n            if (!((res == null ? void 0 : res.isSuccess) == 1)) {\n              _context5.next = 35;\n              break;\n            }\n\n            _context5.next = 22;\n            return _regeneratorRuntime.awrap(getToken('0399338390', 'RgWhhm^xC@xdQ68N'));\n\n          case 22:\n            auth = _context5.sent;\n\n            if (auth) {\n              dispatch({\n                type: \"GET_ACCOUNT\",\n                payload: auth\n              });\n            }\n\n            _context5.next = 26;\n            return _regeneratorRuntime.awrap(registerForPushNotificationsAsync());\n\n          case 26:\n            tokenDevice = _context5.sent;\n            _context5.next = 29;\n            return _regeneratorRuntime.awrap(UserService.updateFireBaseToken({\n              FireBaseToken: tokenDevice\n            }));\n\n          case 29:\n            resFireBase = _context5.sent;\n            onGetMenuAccess(res.data.userId);\n            clearInput();\n            props.navigation.replace(\"Main\");\n            _context5.next = 36;\n            break;\n\n          case 35:\n            setTxtErrorPhone(res == null ? void 0 : res.message);\n\n          case 36:\n            setIssubmit(false);\n            _context5.next = 39;\n            break;\n\n          case 39:\n            _context5.next = 44;\n            break;\n\n          case 41:\n            _context5.prev = 41;\n            _context5.t0 = _context5[\"catch\"](9);\n            console.log(_context5.t0);\n\n          case 44:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[9, 41]], Promise);\n  };\n\n  var handleBiometricAuth = function handleBiometricAuth() {\n    var compatible, type, savedBiometrics;\n    return _regeneratorRuntime.async(function handleBiometricAuth$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(LocalAuthentication.hasHardwareAsync());\n\n          case 2:\n            compatible = _context6.sent;\n\n            if (!compatible) {\n              _context6.next = 8;\n              break;\n            }\n\n            _context6.next = 6;\n            return _regeneratorRuntime.awrap(LocalAuthentication.supportedAuthenticationTypesAsync());\n\n          case 6:\n            type = _context6.sent;\n            setTypeBiometric(type);\n\n          case 8:\n            _context6.next = 10;\n            return _regeneratorRuntime.awrap(LocalAuthentication.isEnrolledAsync());\n\n          case 10:\n            savedBiometrics = _context6.sent;\n            setIsEnrolled(savedBiometrics);\n\n          case 12:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    handleBiometricAuth();\n\n    _getAsyncStorage();\n  }, []);\n  useEffect(function () {\n    if (isSecurity && typeBiometric.length > 0 && isEnrolled) {\n      onAuth();\n    }\n  }, [isSecurity, typeBiometric, isEnrolled]);\n  return React.createElement(TouchableNativeFeedback, {\n    onPress: Keyboard.dismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.logoContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: Images.logo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: styles.rowlogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: styles.formlogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 25\n    }\n  }, \"Sign In\"), React.createElement(View, {\n    style: {\n      height: 56\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 25\n    }\n  }, React.createElement(View, {\n    style: {\n      height: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 29\n    }\n  }, txtErrorPhone == '' ? React.createElement(React.Fragment, null) : React.createElement(Text, {\n    style: styles.errorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 64\n    }\n  }, txtErrorPhone)), React.createElement(View, {\n    style: [styles.viewInput, {\n      borderColor: isFocusPhone ? colors.mainColor : txtErrorPhone == '' ? 'rgba(242, 243, 245, 0.2)' : \"red\",\n      borderWidth: 1.5\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 29\n    }\n  }, React.createElement(TextInput, {\n    style: styles.textInput,\n    onFocus: function onFocus() {\n      return setIsFocusPhone(true);\n    },\n    onBlur: function onBlur() {\n      return setIsFocusPhone(false);\n    },\n    value: phonenumber,\n    onChangeText: onChangePhoneNumber,\n    placeholder: \"Telephone or Email\",\n    placeholderTextColor: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 33\n    }\n  }))), React.createElement(View, {\n    style: {\n      height: 56,\n      marginTop: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 25\n    }\n  }, React.createElement(View, {\n    style: {\n      height: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 29\n    }\n  }, txtErrorPass == '' ? React.createElement(React.Fragment, null) : React.createElement(Text, {\n    style: styles.errorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 63\n    }\n  }, txtErrorPass)), React.createElement(View, {\n    style: [styles.viewInput, {\n      borderColor: isFocusPass ? colors.mainColor : txtErrorPass == '' ? 'rgba(242, 243, 245, 0.2)' : \"red\",\n      borderWidth: 1.5\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 29\n    }\n  }, React.createElement(TextInput, {\n    style: styles.textInput,\n    onFocus: function onFocus() {\n      return setIsFocusPass(true);\n    },\n    onBlur: function onBlur() {\n      return setIsFocusPass(false);\n    },\n    value: password,\n    onChangeText: onChangePass,\n    placeholder: \"Password\",\n    placeholderTextColor: \"#fff\",\n    secureTextEntry: !isShowPass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 33\n    }\n  }), React.createElement(Ionicons, {\n    style: styles.showPass,\n    name: !isShowPass ? 'eye-off' : 'eye',\n    size: 20,\n    color: \"#fff\",\n    onPress: function onPress() {\n      setShowPass(function (isShowPass) {\n        return !isShowPass;\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 33\n    }\n  }))), React.createElement(View, {\n    style: {\n      marginTop: 8,\n      alignItems: 'flex-end'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 25\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      props.navigation.navigate(\"Forgot\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 29\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      fontSize: 14,\n      color: colors.mainColor\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 33\n    }\n  }, \"Forgot password?\"))), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      width: '100%',\n      justifyContent: 'space-between',\n      marginTop: 36\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 25\n    }\n  }, React.createElement(LinearGradient, {\n    style: [styles.button, {\n      width: isSecurity && typeBiometric.length > 0 ? '80%' : '100%'\n    }],\n    colors: ['#DAB451', '#988050'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 29\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      onSubmit();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 33\n    }\n  }, React.createElement(Text, {\n    style: styles.textButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 37\n    }\n  }, \"Sign In\"))), isSecurity && typeBiometric.length > 0 && React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return onAuth();\n    },\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 67\n    }\n  }, React.createElement(SvgUri, {\n    source: typeBiometric[0] == 1 ? Icons.icon_TouchID : Icons.icon_FaceID,\n    fill: '#DAB451',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 33\n    }\n  })))), React.createElement(View, {\n    style: {\n      zIndex: 1,\n      width: Dimensions.get(\"window\").width,\n      alignItems: 'center',\n      position: 'absolute',\n      bottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 21\n    }\n  }, React.createElement(Image, {\n    style: styles.imageBottom,\n    source: Images.image_bottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 25\n    }\n  }))), React.createElement(DialogAwait, {\n    isShow: isSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 17\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: colors.backgroundLogin\n  },\n  title: {\n    color: '#DAB451',\n    fontSize: 26,\n    textAlign: 'center',\n    marginBottom: 30,\n    fontWeight: '600'\n  },\n  textButton: {\n    textAlign: 'center',\n    color: 'white',\n    fontSize: 17,\n    lineHeight: 25.5\n  },\n  logo: {\n    width: 113,\n    height: 85\n  },\n  logoContainer: {\n    marginTop: 102,\n    alignItems: \"center\"\n  },\n  rowlogin: {\n    flex: 7,\n    justifyContent: 'flex-start',\n    paddingTop: 60,\n    paddingBottom: 0\n  },\n  formlogin: {\n    zIndex: 4,\n    justifyContent: 'flex-start',\n    paddingTop: 0,\n    paddingRight: 30,\n    paddingLeft: 30\n  },\n  viewInput: {\n    flexDirection: 'row',\n    backgroundColor: 'rgba(242, 243, 245, 0.2)',\n    height: 46,\n    borderRadius: 4,\n    zIndex: 1\n  },\n  textInput: {\n    color: 'white',\n    opacity: 1,\n    zIndex: 3,\n    width: '100%',\n    paddingLeft: 15,\n    fontSize: 14,\n    fontWeight: '400'\n  },\n  button: {\n    width: '80%',\n    paddingVertical: 9,\n    borderRadius: 4,\n    justifyContent: 'center'\n  },\n  imageBottom: {\n    width: '100%'\n  },\n  showPass: {\n    justifyContent: 'center',\n    position: 'absolute',\n    right: 10,\n    bottom: 12,\n    zIndex: 4\n  },\n  errorText: {\n    color: colors.red,\n    marginLeft: 5,\n    fontWeight: '500',\n    fontSize: 12,\n    marginStart: 15\n  }\n});","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/screens/loginScreen.tsx"],"names":["React","TouchableOpacity","Images","Icons","Ionicons","useState","useEffect","colors","LinearGradient","loginAsync","_getAccount","UserService","getToken","SvgUri","DialogAwait","LocalAuthentication","AsyncStorage","useDispatch","Constants","Notifications","LoginScreen","props","dispatch","typeBiometric","setTypeBiometric","isEnrolled","setIsEnrolled","isSecurity","setIsSecurity","isSubmit","setIssubmit","isShowPass","setShowPass","phonenumber","setPhonenumber","password","setPassword","txtErrorPhone","setTxtErrorPhone","txtErrorPass","setTxtErrorPass","isFocusPhone","setIsFocusPhone","isFocusPass","setIsFocusPass","registerForPushNotificationsAsync","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","token","data","getDevicePushTokenAsync","tokenDevice","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","_getAsyncStorage","getItem","res","onChangePhoneNumber","value","onChangePass","clearInput","onSubmit","validate","validateForm","isSuccess","auth","type","payload","updateFireBaseToken","FireBaseToken","resFireBase","onGetMenuAccess","userId","navigation","replace","message","length","id","getMenuByUserId","response","_payload","map","item","isEnabled","isAccess","push","onAuth","acc","username","authenticateAsync","results","success","console","log","handleBiometricAuth","hasHardwareAsync","compatible","supportedAuthenticationTypesAsync","isEnrolledAsync","savedBiometrics","Keyboard","dismiss","styles","container","logoContainer","logo","rowlogin","formlogin","title","height","errorText","viewInput","borderColor","mainColor","borderWidth","textInput","marginTop","showPass","alignItems","navigate","textAlign","fontSize","color","flexDirection","width","justifyContent","button","textButton","icon_TouchID","icon_FaceID","zIndex","Dimensions","get","position","bottom","imageBottom","image_bottom","StyleSheet","create","flex","backgroundColor","backgroundLogin","marginBottom","fontWeight","lineHeight","paddingTop","paddingBottom","paddingRight","paddingLeft","borderRadius","opacity","paddingVertical","right","red","marginLeft","marginStart"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View, Text, ActivityIndicator, Modal,Alert } from 'react-native';\r\nimport { Image, StyleSheet, TextInput, Keyboard, TouchableNativeFeedback, Platform, Dimensions } from \"react-native\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport { Images,Icons } from '../assets';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { useState, useEffect } from 'react';\r\nimport { StackNavigationProp } from '@react-navigation/stack';\r\nimport { AuthorStackParamList } from '../types';\r\nimport { colors } from '../utils/Colors';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { loginAsync, _getAccount } from '../netWorking/authService'\r\nimport { UserService } from '../netWorking/userService'\r\nimport { getToken } from '../netWorking/eohService'\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport SvgUri from \"react-native-svg-uri\";\r\nimport DialogAwait from '../components/dialogs/dialogAwait';\r\nimport * as LocalAuthentication from 'expo-local-authentication'\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport Constants from \"expo-constants\";\r\nimport * as Notifications from \"expo-notifications\";\r\ninterface Props {\r\n    navigation: StackNavigationProp<AuthorStackParamList>\r\n}\r\n\r\nexport default function LoginScreen(props: Props) {\r\n    const dispatch = useDispatch();\r\n    \r\n    const [typeBiometric, setTypeBiometric] = useState([]);\r\n    const [isEnrolled, setIsEnrolled] = useState(false);\r\n    const [isSecurity, setIsSecurity] = useState(false);\r\n\r\n    const [isSubmit, setIssubmit] = useState(false);\r\n    const [isShowPass, setShowPass] = useState(false);\r\n    const [phonenumber, setPhonenumber] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [txtErrorPhone, setTxtErrorPhone] = useState('');\r\n    const [txtErrorPass, setTxtErrorPass] = useState('');\r\n    const [isFocusPhone, setIsFocusPhone] = useState(false);\r\n    const [isFocusPass, setIsFocusPass] = useState(false);\r\n\r\n    \r\n    async function registerForPushNotificationsAsync() {\r\n        let token;\r\n        let tokenDevice;\r\n        if (Constants.isDevice) {\r\n        const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n        let finalStatus = existingStatus;\r\n        if (existingStatus !== \"granted\") {\r\n            const { status } = await Notifications.requestPermissionsAsync();\r\n            finalStatus = status;\r\n        }\r\n        if (finalStatus !== \"granted\") {\r\n            alert(\"Failed to get push token for push notification!\");\r\n            return;\r\n        }\r\n        token = (await Notifications.getExpoPushTokenAsync()).data;\r\n        tokenDevice = (await Notifications.getDevicePushTokenAsync()).data;\r\n        } else {\r\n        alert(\"Must use physical device for Push Notifications\");\r\n        }\r\n    \r\n        if (Platform.OS === \"android\") {\r\n        Notifications.setNotificationChannelAsync(\"default\", {\r\n            name: \"default\",\r\n            importance: Notifications.AndroidImportance.MAX,\r\n            vibrationPattern: [0, 250, 250, 250],\r\n            lightColor: \"#FF231F7C\",\r\n        });\r\n        }\r\n    \r\n        return token;\r\n    }\r\n\r\n    async function _getAsyncStorage() {\r\n        try {\r\n            let res= await AsyncStorage.getItem('security');\r\n            if(res !== null) setIsSecurity(!!+res)\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n    const onChangePhoneNumber = (value: string) => {\r\n        setPhonenumber(value)\r\n        if (value && phonenumber) {\r\n            setTxtErrorPhone('');\r\n        }\r\n    }\r\n\r\n    const onChangePass = (value: string) => {\r\n        setPassword(value)\r\n        if (value && password) {\r\n            setTxtErrorPass('');\r\n        }\r\n    }\r\n\r\n    const clearInput = () => {\r\n        setPhonenumber('');\r\n        setPassword('');\r\n        setTxtErrorPhone('');\r\n        setTxtErrorPass('');\r\n    }\r\n\r\n    const onSubmit = async () => {\r\n        // setIssubmit(true);\r\n        // clearInput();\r\n        // props.navigation.replace(\"Main\");\r\n        // setIssubmit(false);\r\n\r\n        let validate = validateForm()\r\n        alert(validate)\r\n        if (validate) {\r\n            setIssubmit(true);\r\n            const res = await loginAsync(phonenumber, password);\r\n            if (res) {\r\n                if (res?.isSuccess == '1') { \r\n                    const auth =await getToken('0399338390','RgWhhm^xC@xdQ68N')\r\n                    if(auth){dispatch({ type: \"GET_ACCOUNT\", payload: auth })}\r\n                    let tokenDevice = await registerForPushNotificationsAsync()\r\n                    let resFireBase = await UserService.updateFireBaseToken({FireBaseToken:tokenDevice})\r\n                    onGetMenuAccess(res.data.userId)\r\n                    \r\n                    clearInput();\r\n                    props.navigation.replace(\"Main\");\r\n                }\r\n                else {\r\n                    setTxtErrorPhone(res?.message);\r\n                }\r\n            }\r\n            setIssubmit(false);\r\n        }\r\n    }\r\n\r\n    const validateForm = () => {\r\n        if (phonenumber === '') {\r\n            setTxtErrorPhone(\"PhoneNumber or Email cannot be blank!\")\r\n            return false\r\n        }\r\n        if (password === '') {\r\n            setTxtErrorPass(\"Password cannot be blank!\")\r\n            return false\r\n\r\n        }\r\n        if (password.length < 6) {\r\n            setTxtErrorPass(\"Invalid password!\")\r\n            return false\r\n        }\r\n        return (true)\r\n    }\r\n    const onGetMenuAccess= async(id)=>{\r\n        const response = await UserService.getMenuByUserId(id);\r\n            if (response.isSuccess == 1){\r\n                let _payload=[]\r\n                response.data.map(item=>{\r\n                    if(item.isEnabled && item.isAccess){\r\n                        _payload.push(item)\r\n                    }\r\n                })\r\n                dispatch({ type: \"GET_ACCESS\", payload: _payload });\r\n            }\r\n    }\r\n    const onAuth = async () => {\r\n        const acc= await _getAccount()\r\n        if(acc.password ==null ||acc.username==null){\r\n            alert('Please login for the first time to use TouchId / FaceId.')\r\n            return\r\n        }\r\n        if(!isEnrolled){\r\n            alert('Biometric record not found, please verify your identity with your password.')\r\n            return\r\n        }\r\n        \r\n        try {\r\n            const results = await LocalAuthentication.authenticateAsync();\r\n            if (results.success) {\r\n                setIssubmit(true);\r\n                const res = await loginAsync(acc.username, acc.password);\r\n                if (res) {\r\n                    if (res?.isSuccess == 1) {\r\n                        const auth =await getToken('0399338390','RgWhhm^xC@xdQ68N')\r\n                        if(auth){dispatch({ type: \"GET_ACCOUNT\", payload: auth })}\r\n                        let tokenDevice = await registerForPushNotificationsAsync()\r\n                        let resFireBase = await UserService.updateFireBaseToken({FireBaseToken:tokenDevice})\r\n                        onGetMenuAccess(res.data.userId)\r\n                        clearInput();\r\n                        props.navigation.replace(\"Main\");\r\n                    }\r\n                    else {\r\n                        setTxtErrorPhone(res?.message);\r\n                    }\r\n                }\r\n                setIssubmit(false);\r\n            } else {\r\n               \r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        \r\n    }\r\n    const handleBiometricAuth = async () => {\r\n        const compatible = await LocalAuthentication.hasHardwareAsync();\r\n        if(compatible){\r\n        const type = await LocalAuthentication.supportedAuthenticationTypesAsync();\r\n          setTypeBiometric(type)\r\n        }\r\n        const savedBiometrics = await LocalAuthentication.isEnrolledAsync();\r\n        setIsEnrolled(savedBiometrics)\r\n    }\r\n    \r\n    useEffect(() => {\r\n        handleBiometricAuth()\r\n        _getAsyncStorage()\r\n      },[]);\r\n    useEffect(() => {\r\n        if(isSecurity && typeBiometric.length > 0 && isEnrolled){\r\n            onAuth()\r\n        }\r\n      },[isSecurity, typeBiometric, isEnrolled]);\r\n    \r\n    return (\r\n        <TouchableNativeFeedback onPress={Keyboard.dismiss}>\r\n            <View style={styles.container}>\r\n                <View style={styles.logoContainer}>\r\n                    <Image\r\n                        style={styles.logo}\r\n                        source={Images.logo}\r\n                    />\r\n                </View>\r\n                <View style={styles.rowlogin}>\r\n                    <View style={styles.formlogin}>\r\n                        <Text style={styles.title}>Sign In</Text>\r\n                        <View style={{ height: 56 }}>\r\n                            <View style={{ height: 15 }}>\r\n                                {txtErrorPhone == '' ? <></> : <Text style={styles.errorText}>{txtErrorPhone}</Text>}\r\n                            </View>\r\n                            <View style={[styles.viewInput, {\r\n                                borderColor: isFocusPhone ? colors.mainColor : (txtErrorPhone == '' ? 'rgba(242, 243, 245, 0.2)' : \"red\"),\r\n                                borderWidth: 1.5\r\n                            }]}>\r\n                                <TextInput style={styles.textInput}\r\n                                    onFocus={() => setIsFocusPhone(true)}\r\n                                    onBlur={() => setIsFocusPhone(false)}\r\n                                    value={phonenumber}\r\n                                    onChangeText={onChangePhoneNumber}\r\n                                    placeholder=\"Telephone or Email\"\r\n                                    placeholderTextColor=\"white\">\r\n                                </TextInput>\r\n                            </View>\r\n                        </View>\r\n                        <View style={{ height: 56, marginTop: 5 }}>\r\n                            <View style={{ height: 15 }}>\r\n                                {txtErrorPass == '' ? <></> : <Text style={styles.errorText}>{txtErrorPass}</Text>}\r\n                            </View>\r\n                            <View style={[styles.viewInput, {\r\n                                borderColor: isFocusPass ? colors.mainColor : (txtErrorPass == '' ? 'rgba(242, 243, 245, 0.2)' : \"red\"),\r\n                                borderWidth: 1.5\r\n                            }]}>\r\n                                <TextInput\r\n                                    style={styles.textInput}\r\n                                    onFocus={() => setIsFocusPass(true)}\r\n                                    onBlur={() => setIsFocusPass(false)}\r\n                                    value={password}\r\n                                    onChangeText={onChangePass}\r\n                                    placeholder=\"Password\"\r\n                                    placeholderTextColor=\"#fff\"\r\n                                    secureTextEntry={!isShowPass}>\r\n                                </TextInput>\r\n                                <Ionicons style={styles.showPass} name={!isShowPass ? 'eye-off' : 'eye'} size={20} color=\"#fff\"\r\n                                    onPress={() => {\r\n                                        setShowPass((isShowPass) => !isShowPass)\r\n                                    }} />\r\n                            </View>\r\n                        </View>\r\n                        <View style={{ marginTop: 8, alignItems: 'flex-end' }}>\r\n                            <TouchableOpacity\r\n                                onPress={() => { props.navigation.navigate(\"Forgot\"); }}\r\n                            >\r\n                                <Text style={{ textAlign: 'center', fontSize: 14, color: colors.mainColor }}>\r\n                                    Forgot password?\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                        <View style={{flexDirection:'row', alignItems:'center', width:'100%', justifyContent:'space-between', marginTop:36}}>\r\n                            <LinearGradient style={[styles.button,{width:isSecurity&&typeBiometric.length>0?'80%':'100%'}]} colors={['#DAB451', '#988050']}>\r\n                                <TouchableOpacity onPress={() => { onSubmit();}}>\r\n                                    <Text style={styles.textButton}>Sign In</Text>\r\n                                </TouchableOpacity>\r\n                            </LinearGradient>\r\n                            {isSecurity &&typeBiometric.length>0&&<TouchableOpacity onPress={()=>onAuth()} style={{}}>\r\n                                <SvgUri source={typeBiometric[0]==1?Icons.icon_TouchID:Icons.icon_FaceID} fill={'#DAB451'} />\r\n                            </TouchableOpacity> }\r\n\r\n                        </View>\r\n                       \r\n\r\n                    </View>\r\n                    <View style={{ zIndex: 1, width:Dimensions.get(\"window\").width, alignItems: 'center', position:'absolute', bottom:0}}>\r\n                        <Image\r\n                            style={styles.imageBottom}\r\n                            source={Images.image_bottom}\r\n                        />\r\n                    </View>\r\n                </View>\r\n                <DialogAwait\r\n                    isShow={isSubmit}\r\n                ></DialogAwait>\r\n            </View>\r\n        </TouchableNativeFeedback >\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        backgroundColor: colors.backgroundLogin,\r\n    },\r\n    title: {\r\n        color: '#DAB451',\r\n        fontSize: 26,\r\n        textAlign: 'center',\r\n        marginBottom: 30,\r\n        fontWeight: '600'\r\n    },\r\n    textButton: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        fontSize: 17,\r\n        lineHeight:25.5\r\n    },\r\n    logo: {\r\n        width: 113,\r\n        height: 85,\r\n    },\r\n    logoContainer: {\r\n        marginTop: 102,\r\n        alignItems: \"center\",\r\n    },\r\n    rowlogin: {\r\n        flex: 7,\r\n        // justifyContent: 'space-between',\r\n        justifyContent: 'flex-start',\r\n        paddingTop: 60,\r\n        paddingBottom: 0\r\n    },\r\n    formlogin: {\r\n        zIndex: 4,\r\n        justifyContent: 'flex-start',\r\n        paddingTop: 0,\r\n        paddingRight: 30,\r\n        paddingLeft: 30\r\n    },\r\n    viewInput: {\r\n        flexDirection: 'row',\r\n        backgroundColor: 'rgba(242, 243, 245, 0.2)',\r\n        height: 46,\r\n        borderRadius: 4,\r\n        // marginBottom: 20,\r\n        zIndex: 1,\r\n    },\r\n    textInput: {\r\n        color: 'white',\r\n        opacity: 1,\r\n        zIndex: 3,\r\n        width: '100%',\r\n        paddingLeft: 15,\r\n        fontSize: 14,\r\n        fontWeight: '400'\r\n    },\r\n    button: {\r\n        width: '80%',\r\n        paddingVertical:9,\r\n        borderRadius: 4,\r\n        justifyContent: 'center'\r\n    },\r\n    imageBottom: {\r\n        width: '100%',\r\n        // alignItems:'center',\r\n        // justifyContent:'flex-start'\r\n        // position: 'absolute',\r\n        // bottom: 0\r\n    },\r\n    showPass: {\r\n        justifyContent: 'center',\r\n        position: 'absolute',\r\n        right: 10,\r\n        bottom: 12,\r\n        zIndex: 4\r\n    },\r\n    errorText: {\r\n        color: colors.red,\r\n        marginLeft: 5,\r\n        fontWeight: '500',\r\n        fontSize: 12,\r\n        marginStart: 15\r\n    },\r\n})"]},"metadata":{},"sourceType":"module"}