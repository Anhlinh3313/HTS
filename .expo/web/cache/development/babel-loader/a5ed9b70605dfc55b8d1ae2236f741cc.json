{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\angular\\\\hts_reactnative\\\\node_modules\\\\react-native-user-inactivity\\\\lib\\\\index.js\";\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { defaultTimeoutHandler, useTimeout } from 'usetimeout-react-hook';\nvar defaultTimeForInactivity = 10000;\nvar defaultStyle = {\n  flex: 1\n};\n\nvar UserInactivity = function UserInactivity(_ref) {\n  var children = _ref.children,\n      isActive = _ref.isActive,\n      onAction = _ref.onAction,\n      skipKeyboard = _ref.skipKeyboard,\n      style = _ref.style,\n      timeForInactivity = _ref.timeForInactivity,\n      timeoutHandler = _ref.timeoutHandler;\n  var actualStyle = style || defaultStyle;\n  var actualTimeoutHandler = timeoutHandler || defaultTimeoutHandler;\n  var timeout = timeForInactivity || defaultTimeForInactivity;\n  var initialActive = isActive === undefined ? true : isActive;\n\n  var _useState = useState(initialActive),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  useEffect(function () {\n    if (isActive) {\n      resetTimerDueToActivity();\n    }\n  }, [isActive]);\n\n  var _useState3 = useState(Date.now()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      date = _useState4[0],\n      setDate = _useState4[1];\n\n  var cancelTimer = useTimeout(function () {\n    setActive(false);\n    onAction(false);\n  }, timeout, actualTimeoutHandler, [date, timeout]);\n  var isFirstRender = useRef(true);\n  useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    } else {\n      if (active) {\n        onAction(true);\n      }\n    }\n  }, [active]);\n  useEffect(function () {\n    if (skipKeyboard) {\n      return;\n    }\n\n    var hideEvent = Keyboard.addListener('keyboardDidHide', resetTimerDueToActivity);\n    var showEvent = Keyboard.addListener('keyboardDidShow', resetTimerDueToActivity);\n    return function () {\n      hideEvent.remove();\n      showEvent.remove();\n    };\n  }, []);\n\n  function resetTimerDueToActivity() {\n    cancelTimer();\n    setActive(true);\n    setDate(Date.now());\n  }\n\n  function resetTimerForPanResponder() {\n    resetTimerDueToActivity();\n    return false;\n  }\n\n  var _useState5 = useState(PanResponder.create({\n    onMoveShouldSetPanResponderCapture: resetTimerForPanResponder,\n    onPanResponderTerminationRequest: resetTimerForPanResponder,\n    onStartShouldSetPanResponderCapture: resetTimerForPanResponder\n  })),\n      _useState6 = _slicedToArray(_useState5, 2),\n      panResponder = _useState6[0],\n      _ = _useState6[1];\n\n  return React.createElement(View, _extends({\n    style: actualStyle,\n    collapsable: false\n  }, panResponder.panHandlers, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), children);\n};\n\nexport default UserInactivity;","map":{"version":3,"sources":["D:/angular/hts_reactnative/node_modules/react-native-user-inactivity/lib/index.js"],"names":["React","useEffect","useRef","useState","defaultTimeoutHandler","useTimeout","defaultTimeForInactivity","defaultStyle","flex","UserInactivity","children","isActive","onAction","skipKeyboard","style","timeForInactivity","timeoutHandler","actualStyle","actualTimeoutHandler","timeout","initialActive","undefined","active","setActive","resetTimerDueToActivity","Date","now","date","setDate","cancelTimer","isFirstRender","current","hideEvent","Keyboard","addListener","showEvent","remove","resetTimerForPanResponder","PanResponder","create","onMoveShouldSetPanResponderCapture","onPanResponderTerminationRequest","onStartShouldSetPanResponderCapture","panResponder","_","panHandlers"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, } from 'react';\r\nimport { Keyboard, PanResponder, View, } from 'react-native';\r\nimport { defaultTimeoutHandler, useTimeout, } from 'usetimeout-react-hook';\r\nconst defaultTimeForInactivity = 10000;\r\nconst defaultStyle = {\r\n    flex: 1,\r\n};\r\nconst UserInactivity = ({ children, isActive, onAction, skipKeyboard, style, timeForInactivity, timeoutHandler, }) => {\r\n    const actualStyle = style || defaultStyle;\r\n    /**\r\n     * If the user has provided a custom timeout handler, it is used directly,\r\n     * otherwise it defaults to the default timeout handler (setTimeout/clearTimeout).\r\n     */\r\n    const actualTimeoutHandler = timeoutHandler || defaultTimeoutHandler;\r\n    const timeout = timeForInactivity || defaultTimeForInactivity;\r\n    /**\r\n     * If the `isActive` prop is manually changed to `true`, call `resetTimerDueToActivity`\r\n     * to reset the timer and set the current state to active until the timeout expires.\r\n     * If the `isActive` is changed to `false`, nothing is done.\r\n     * Note however that toggling `isActive` manually is discouraged for normal use.\r\n     * It should only be used in those cases where React Native doesnt't seem to\r\n     * inform the `PanResponder` instance about touch events, such as when tapping\r\n     * over the keyboard.\r\n     */\r\n    const initialActive = isActive === undefined ? true : isActive;\r\n    const [active, setActive] = useState(initialActive);\r\n    useEffect(() => {\r\n        if (isActive) {\r\n            resetTimerDueToActivity();\r\n        }\r\n    }, [isActive]);\r\n    const [date, setDate] = useState(Date.now());\r\n    /**\r\n     * The timeout is reset when either `date` or `timeout` change.\r\n     */\r\n    const cancelTimer = useTimeout(() => {\r\n        setActive(false);\r\n        onAction(false);\r\n        // @ts-ignore\r\n    }, timeout, actualTimeoutHandler, [date, timeout]);\r\n    const isFirstRender = useRef(true);\r\n    /**\r\n     * Triggers `onAction` each time the `active` state turns true\r\n     * after the initial render.\r\n     */\r\n    useEffect(() => {\r\n        if (isFirstRender.current) {\r\n            isFirstRender.current = false;\r\n        }\r\n        else {\r\n            if (active) {\r\n                onAction(true);\r\n            }\r\n        }\r\n    }, [active]);\r\n    /**\r\n     * Resets the timer every time the keyboard appears or disappears,\r\n     * unless skipKeyboard is true.\r\n     */\r\n    useEffect(() => {\r\n        if (skipKeyboard) {\r\n            return;\r\n        }\r\n        const hideEvent = Keyboard.addListener('keyboardDidHide', resetTimerDueToActivity);\r\n        const showEvent = Keyboard.addListener('keyboardDidShow', resetTimerDueToActivity);\r\n        // release event listeners on destruction\r\n        return () => {\r\n            hideEvent.remove();\r\n            showEvent.remove();\r\n        };\r\n    }, []);\r\n    /**\r\n     * This method is called whenever a touch is detected. If no touch is\r\n     * detected after `this.props.timeForInactivity` milliseconds, then\r\n     * `this.state.inactive` turns to true.\r\n     */\r\n    function resetTimerDueToActivity() {\r\n        cancelTimer();\r\n        setActive(true);\r\n        /**\r\n         * Causes `useTimeout` to restart.\r\n         */\r\n        setDate(Date.now());\r\n    }\r\n    /**\r\n     * In order not to steal any touches from the children components, this method\r\n     * must return false.\r\n     */\r\n    function resetTimerForPanResponder( /* event: GestureResponderEvent */) {\r\n        // const { identifier: touchID } = event.nativeEvent;\r\n        resetTimerDueToActivity();\r\n        return false;\r\n    }\r\n    /**\r\n     * The PanResponder instance is initialized only once.\r\n     */\r\n    const [panResponder, _] = useState(PanResponder.create({\r\n        onMoveShouldSetPanResponderCapture: resetTimerForPanResponder,\r\n        onPanResponderTerminationRequest: resetTimerForPanResponder,\r\n        onStartShouldSetPanResponderCapture: resetTimerForPanResponder,\r\n    }));\r\n    return (<View style={actualStyle} collapsable={false} {...panResponder.panHandlers}>\r\n      {children}\r\n    </View>);\r\n};\r\nexport default UserInactivity;\r\n"]},"metadata":{},"sourceType":"module"}