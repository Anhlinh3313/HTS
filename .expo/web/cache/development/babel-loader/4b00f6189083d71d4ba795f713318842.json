{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Environment } from \"../environment\";\nimport { _getToken } from \"./authService\";\nimport { fetchAPIPost } from \"./baseService\";\nvar url = Environment.apiPost;\nexport var StockInventoryService = function () {\n  function StockInventoryService() {\n    _classCallCheck(this, StockInventoryService);\n  }\n\n  _createClass(StockInventoryService, null, [{\n    key: \"GetAllProd\",\n    value: function GetAllProd(PageNum, PageSize, listCategoryId) {\n      var data;\n      return _regeneratorRuntime.async(function GetAllProd$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/StockInventory/GetAllProd\",\n                body: {\n                  PageNum: PageNum,\n                  PageSize: PageSize,\n                  listCategoryId: listCategoryId\n                }\n              }));\n\n            case 2:\n              data = _context.sent;\n              return _context.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return StockInventoryService;\n}();\nexport var getStockInventory = function getStockInventory(_storeId, _categoryId, _dateFrom, _dateTo) {\n  var token, response, json;\n  return _regeneratorRuntime.async(function getStockInventory$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 2:\n          token = _context2.sent;\n          _context2.prev = 3;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(fetch(url + '/api/StockInventory/GetStockInventory', {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Authorization': token ? \"Bearer \" + token : ''\n            },\n            body: JSON.stringify({\n              storeId: _storeId,\n              categoryId: _categoryId,\n              dateFrom: _dateFrom,\n              dateTo: _dateTo\n            })\n          }));\n\n        case 6:\n          response = _context2.sent;\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 9:\n          json = _context2.sent;\n          return _context2.abrupt(\"return\", json);\n\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2[\"catch\"](3);\n          console.error(_context2.t0);\n          return _context2.abrupt(\"return\", _context2.t0);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[3, 13]], Promise);\n};\nexport var getStockInventoryList = function getStockInventoryList(_storeId, _categoryId) {\n  var token, response, json;\n  return _regeneratorRuntime.async(function getStockInventoryList$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 2:\n          token = _context3.sent;\n          _context3.prev = 3;\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(fetch(url + '/api/StockInventory/GetStockInventoryList', {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Authorization': token ? \"Bearer \" + token : ''\n            },\n            body: JSON.stringify({\n              storeId: _storeId,\n              categoryId: _categoryId\n            })\n          }));\n\n        case 6:\n          response = _context3.sent;\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 9:\n          json = _context3.sent;\n          return _context3.abrupt(\"return\", json);\n\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](3);\n          console.error(_context3.t0);\n          return _context3.abrupt(\"return\", _context3.t0);\n\n        case 17:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[3, 13]], Promise);\n};\nexport var getStockInventoryFast = function getStockInventoryFast(_dateFrom, _dateTo, _itemCode) {\n  var token, response, json;\n  return _regeneratorRuntime.async(function getStockInventoryFast$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 2:\n          token = _context4.sent;\n          _context4.prev = 3;\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(fetch(url + '/api/StockInventory/GetStockInventoryFast', {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Authorization': token ? \"Bearer \" + token : ''\n            },\n            body: JSON.stringify({\n              StringDateFrom: _dateFrom,\n              StringDateTo: _dateTo,\n              ItemCode: _itemCode\n            })\n          }));\n\n        case 6:\n          response = _context4.sent;\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 9:\n          json = _context4.sent;\n          return _context4.abrupt(\"return\", json);\n\n        case 13:\n          _context4.prev = 13;\n          _context4.t0 = _context4[\"catch\"](3);\n          console.error(_context4.t0);\n          return _context4.abrupt(\"return\", _context4.t0);\n\n        case 17:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[3, 13]], Promise);\n};\nexport var getStockInventoryByItem = function getStockInventoryByItem(_itemCode) {\n  var token, response, json;\n  return _regeneratorRuntime.async(function getStockInventoryByItem$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 2:\n          token = _context5.sent;\n          _context5.prev = 3;\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(fetch(url + (\"/api/StockInventory/GetStockInventoryByItemCode?itemCode=\" + _itemCode), {\n            method: 'GET',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Authorization': token ? \"Bearer \" + token : ''\n            }\n          }));\n\n        case 6:\n          response = _context5.sent;\n          _context5.next = 9;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 9:\n          json = _context5.sent;\n          return _context5.abrupt(\"return\", json);\n\n        case 13:\n          _context5.prev = 13;\n          _context5.t0 = _context5[\"catch\"](3);\n          console.error(_context5.t0);\n          return _context5.abrupt(\"return\", _context5.t0);\n\n        case 17:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[3, 13]], Promise);\n};","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/netWorking/stockInventoryService.tsx"],"names":["Environment","_getToken","fetchAPIPost","url","apiPost","StockInventoryService","PageNum","PageSize","listCategoryId","body","data","getStockInventory","_storeId","_categoryId","_dateFrom","_dateTo","token","fetch","method","headers","JSON","stringify","storeId","categoryId","dateFrom","dateTo","response","json","console","error","getStockInventoryList","getStockInventoryFast","_itemCode","StringDateFrom","StringDateTo","ItemCode","getStockInventoryByItem"],"mappings":"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","sourcesContent":["import { Environment } from \"../environment\";\r\nimport { _getToken } from \"./authService\";\r\nimport { fetchAPIGet, fetchAPIPost } from \"./baseService\";\r\nimport { IResponseModel } from \"../models/IResponseModel\";\r\n\r\nlet url = Environment.apiPost;\r\nexport class StockInventoryService{\r\n    public static async GetAllProd(PageNum:number, PageSize:number, listCategoryId:string[]): Promise<IResponseModel> {\r\n        let data = (await fetchAPIPost({\r\n          url: `/api/StockInventory/GetAllProd`,\r\n          body:{PageNum,PageSize,listCategoryId}\r\n        })) as IResponseModel;\r\n        return data;\r\n      }\r\n    \r\n}\r\nexport const getStockInventory = async (_storeId: any, _categoryId: any, _dateFrom: any, _dateTo: any) => {\r\n    const token = await _getToken();\r\n    try {\r\n        let response = await fetch(url + '/api/StockInventory/GetStockInventory', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token ? `Bearer ${token}` : '',\r\n            },\r\n            body: JSON.stringify({\r\n                storeId: _storeId,\r\n                categoryId: _categoryId,\r\n                dateFrom: _dateFrom,\r\n                dateTo: _dateTo\r\n            })\r\n        })\r\n        let json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        console.error(error);\r\n        return (error);\r\n    }\r\n}\r\n\r\nexport const getStockInventoryList = async (_storeId: any, _categoryId: any) => {\r\n    const token = await _getToken();\r\n    try {\r\n        let response = await fetch(url + '/api/StockInventory/GetStockInventoryList', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token ? `Bearer ${token}` : '',\r\n            },\r\n            body: JSON.stringify({\r\n                storeId: _storeId,\r\n                categoryId: _categoryId,\r\n            })\r\n        })\r\n        let json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        console.error(error);\r\n        return (error);\r\n    }\r\n}\r\n\r\nexport const getStockInventoryFast = async (_dateFrom: any, _dateTo: any, _itemCode: any) => {\r\n    const token = await _getToken();\r\n    try {\r\n        let response = await fetch(url + '/api/StockInventory/GetStockInventoryFast', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token ? `Bearer ${token}` : '',\r\n            },\r\n            body: JSON.stringify({\r\n                StringDateFrom: _dateFrom,\r\n                StringDateTo: _dateTo,\r\n                ItemCode: _itemCode\r\n            })\r\n        })\r\n        let json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        console.error(error);\r\n        return (error);\r\n    }\r\n}\r\nexport const getStockInventoryByItem = async (_itemCode: any) => {\r\n    const token = await _getToken();\r\n    try {\r\n        let response = await fetch(url + `/api/StockInventory/GetStockInventoryByItemCode?itemCode=${_itemCode}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token ? `Bearer ${token}` : '',\r\n            },\r\n        })\r\n        let json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        console.error(error);\r\n        return (error);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}