{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\angular\\\\hts_reactnative\\\\src\\\\app\\\\components\\\\PickerInput\\\\index.tsx\";\n\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { colors } from \"../../utils/Colors\";\nimport { TouchableHighlight, TouchableOpacity } from \"react-native-gesture-handler\";\n\nvar PickerInput = function PickerInput(_ref) {\n  var items = _ref.items,\n      value = _ref.value,\n      onChoose = _ref.onChoose;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVisible = _useState2[0],\n      setIsVisible = _useState2[1];\n\n  var _useState3 = useState(value),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pickValue = _useState4[0],\n      setPickValue = _useState4[1];\n\n  var handleOnChoose = function handleOnChoose(item) {\n    setPickValue(item);\n    setIsVisible(false);\n    onChoose(item);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: [styles.inputUnit],\n    onPress: function onPress() {\n      setIsVisible(!isVisible);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    numberOfLines: 1,\n    style: {\n      color: colors.white,\n      width: '80%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, pickValue), React.createElement(Ionicons, {\n    style: {},\n    name: \"caret-down\",\n    size: 14,\n    color: \"#fff\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  })), isVisible && React.createElement(View, {\n    style: [styles.pickUnit],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, items.map(function (item, index) {\n    return React.createElement(TouchableHighlight, {\n      key: index,\n      style: {\n        paddingHorizontal: 16,\n        paddingVertical: 4\n      },\n      underlayColor: colors.yellowishbrown,\n      onPress: function onPress() {\n        return handleOnChoose(item);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }\n    }, React.createElement(Text, {\n      numberOfLines: 1,\n      style: {\n        color: colors.white\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, item));\n  })));\n};\n\nexport default PickerInput;\nvar styles = StyleSheet.create({\n  inputUnit: {\n    height: 40,\n    flex: 1,\n    borderRadius: 4,\n    backgroundColor: \"#303030\",\n    paddingHorizontal: 12,\n    paddingVertical: 9,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    marginTop: 5\n  },\n  pickUnit: {\n    width: '100%',\n    backgroundColor: \"#414141\",\n    borderRadius: 4,\n    position: \"absolute\",\n    right: 0,\n    top: 50,\n    paddingVertical: 10,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n    zIndex: 9999\n  }\n});","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/components/PickerInput/index.tsx"],"names":["React","useState","Ionicons","colors","TouchableHighlight","TouchableOpacity","PickerInput","items","value","onChoose","isVisible","setIsVisible","pickValue","setPickValue","handleOnChoose","item","flex","styles","inputUnit","color","white","width","pickUnit","map","index","paddingHorizontal","paddingVertical","yellowishbrown","StyleSheet","create","height","borderRadius","backgroundColor","flexDirection","justifyContent","alignItems","marginTop","position","right","top","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","zIndex"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { Icons, Images } from \"../../assets\";\r\nimport { colors } from \"../../utils/Colors\";\r\nimport { TouchableHighlight, TouchableOpacity } from \"react-native-gesture-handler\";\r\ninterface props {\r\n  items: string[];\r\n  value: string;\r\n  onChoose: (value: string) => void;\r\n}\r\nconst PickerInput = ({ items, value, onChoose }: props) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const [pickValue, setPickValue] = useState(value);\r\n  const handleOnChoose = (item:any) => {\r\n    setPickValue(item)\r\n    setIsVisible(false);\r\n    onChoose(item)\r\n  };\r\n  return (\r\n    <View style={{ flex: 1}}>\r\n      <TouchableOpacity\r\n        style={[styles.inputUnit]}\r\n        onPress={() => {\r\n          setIsVisible(!isVisible);\r\n        }}\r\n      >\r\n        <Text numberOfLines={1} style={{ color: colors.white, width:'80%' }}>{pickValue}</Text>\r\n        <Ionicons\r\n          style={{}}\r\n          name={\"caret-down\"}\r\n          size={14}\r\n          color={\"#fff\"}\r\n        ></Ionicons>\r\n      </TouchableOpacity>\r\n      {/* picker */}\r\n      {isVisible && (\r\n        <View style={[styles.pickUnit]}>\r\n          {items.map((item, index) => {\r\n            return (\r\n              <TouchableHighlight\r\n                key={index}\r\n                style={{\r\n                  paddingHorizontal: 16,\r\n                  paddingVertical: 4,\r\n                }}\r\n                underlayColor={colors.yellowishbrown}\r\n                onPress={()=>handleOnChoose(item)}\r\n              >\r\n                <Text numberOfLines={1} style={{ color: colors.white }}>{item}</Text>\r\n              </TouchableHighlight>\r\n            );\r\n          })}\r\n        </View>\r\n      )}\r\n\r\n      {/* -------------- */}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default PickerInput;\r\n\r\nconst styles = StyleSheet.create({\r\n  inputUnit: {\r\n    height: 40,\r\n    flex: 1,\r\n    borderRadius: 4,\r\n    backgroundColor: \"#303030\",\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 9,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    marginTop: 5,\r\n  },\r\n  pickUnit: {\r\n    width:'100%',\r\n    backgroundColor: \"#414141\",\r\n    borderRadius: 4,\r\n    position: \"absolute\",\r\n    right: 0,\r\n    top: 50,\r\n    paddingVertical: 10,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n    zIndex:9999\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}