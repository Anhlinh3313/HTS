{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Environment } from \"../environment\";\nimport { _getToken, _getUserId } from \"./authService\";\nimport { fetchAPIGet, fetchAPIPost } from \"./baseService\";\nexport var UserService = function () {\n  function UserService() {\n    _classCallCheck(this, UserService);\n  }\n\n  _createClass(UserService, null, [{\n    key: \"getUserById\",\n    value: function getUserById(id) {\n      var data;\n      return _regeneratorRuntime.async(function getUserById$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIGet({\n                url: \"/api/Account/GetUserInfoById?id=\" + id\n              }));\n\n            case 2:\n              data = _context.sent;\n              return _context.abrupt(\"return\", data.data);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getUserDetailById\",\n    value: function getUserDetailById(id) {\n      var data;\n      return _regeneratorRuntime.async(function getUserDetailById$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIGet({\n                url: \"/api/Account/Get?id=\" + id\n              }));\n\n            case 2:\n              data = _context2.sent;\n              return _context2.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"uploadAvatar\",\n    value: function uploadAvatar(singleFile) {\n      var token, id, res, responseJson;\n      return _regeneratorRuntime.async(function uploadAvatar$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(_getToken());\n\n            case 2:\n              token = _context3.sent;\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(_getUserId());\n\n            case 5:\n              id = _context3.sent;\n\n              if (!(singleFile != null)) {\n                _context3.next = 21;\n                break;\n              }\n\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(fetch(Environment.apiPost + \"/api/File/UploadImage\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  Id: id,\n                  FileName: \"avatar\",\n                  FileExtension: \"\",\n                  FileBase64String: singleFile\n                }),\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\",\n                  Authorization: token ? \"Bearer \" + token : \"\"\n                }\n              }));\n\n            case 9:\n              res = _context3.sent;\n              _context3.next = 12;\n              return _regeneratorRuntime.awrap(res.json());\n\n            case 12:\n              responseJson = _context3.sent;\n\n              if (!(responseJson.isSuccess == 1)) {\n                _context3.next = 17;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", responseJson.data);\n\n            case 17:\n              alert(responseJson.message);\n              return _context3.abrupt(\"return\");\n\n            case 19:\n              _context3.next = 22;\n              break;\n\n            case 21:\n              return _context3.abrupt(\"return\");\n\n            case 22:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"updateUser\",\n    value: function updateUser(model) {\n      var token, res, responseJson;\n      return _regeneratorRuntime.async(function updateUser$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(_getToken());\n\n            case 2:\n              token = _context4.sent;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(fetch(Environment.apiPost + \"/api/Account/Update\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  avatarBase64: model.avatarBase64,\n                  birthday: model.birthday,\n                  code: model.code,\n                  concurrencyStamp: model.concurrencyStamp,\n                  createdBy: model.createdBy,\n                  createdWhen: model.createdWhen,\n                  email: model.email,\n                  fullName: model.fullName,\n                  gender: model.gender == \"true\" ? true : false,\n                  id: model.id,\n                  isEnabled: model.isEnabled,\n                  isFirsttime: model.isFirsttime,\n                  modifiedBy: model.modifiedBy,\n                  modifiedWhen: model.modifiedWhen,\n                  normalizedEmail: model.normalizedEmail,\n                  normalizedUserName: model.normalizedUserName,\n                  passWord: model.passWord,\n                  passwordHash: model.passwordHash,\n                  phoneNumber: model.phoneNumber,\n                  position: model.position,\n                  roleId: model.roleId,\n                  securityStamp: model.securityStamp,\n                  storeId: model.roleId,\n                  storeName: model.storeName,\n                  titleId: model.titleId,\n                  title: model.title,\n                  userName: model.userName,\n                  isSendMail: model.isSendMail,\n                  isSendInApp: model.isSendInApp,\n                  isSendSMS: model.isSendSMS,\n                  currencyMode: model.currencyMode,\n                  workingHour: model.workingHour\n                }),\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\",\n                  Authorization: token ? \"Bearer \" + token : \"\"\n                }\n              }));\n\n            case 5:\n              res = _context4.sent;\n              _context4.next = 8;\n              return _regeneratorRuntime.awrap(res.json());\n\n            case 8:\n              responseJson = _context4.sent;\n\n              if (!(responseJson.isSuccess == 1)) {\n                _context4.next = 11;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", responseJson.data);\n\n            case 11:\n              return _context4.abrupt(\"return\");\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getMenuByUserId\",\n    value: function getMenuByUserId(id) {\n      var data;\n      return _regeneratorRuntime.async(function getMenuByUserId$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIGet({\n                url: \"/api/Page/GetMenuByUserId?userId=\" + id\n              }));\n\n            case 2:\n              data = _context5.sent;\n              return _context5.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"updateFireBaseToken\",\n    value: function updateFireBaseToken(token) {\n      var data;\n      return _regeneratorRuntime.async(function updateFireBaseToken$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Account/UpdateFireBaseToken\",\n                body: token\n              }));\n\n            case 2:\n              data = _context6.sent;\n              return _context6.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"changePassword\",\n    value: function changePassword(body) {\n      var data;\n      return _regeneratorRuntime.async(function changePassword$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Account/ChangePassWord\",\n                body: body\n              }));\n\n            case 2:\n              data = _context7.sent;\n              return _context7.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return UserService;\n}();","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/netWorking/userService.tsx"],"names":["Environment","_getToken","_getUserId","fetchAPIGet","fetchAPIPost","UserService","id","url","data","singleFile","token","fetch","apiPost","method","body","JSON","stringify","Id","FileName","FileExtension","FileBase64String","headers","Accept","Authorization","res","json","responseJson","isSuccess","alert","message","model","avatarBase64","birthday","code","concurrencyStamp","createdBy","createdWhen","email","fullName","gender","isEnabled","isFirsttime","modifiedBy","modifiedWhen","normalizedEmail","normalizedUserName","passWord","passwordHash","phoneNumber","position","roleId","securityStamp","storeId","storeName","titleId","title","userName","isSendMail","isSendInApp","isSendSMS","currencyMode","workingHour"],"mappings":"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","sourcesContent":["import { Environment } from \"../environment\";\r\nimport { IResponseModel } from \"../models/IResponseModel\";\r\nimport { _getToken, _getUserId } from \"./authService\";\r\nimport { fetchAPIGet, fetchAPIPost } from \"./baseService\";\r\nexport class UserService {\r\n  public static async getUserById(id: any): Promise<UserModel> {\r\n    let data = (await fetchAPIGet({ url: `/api/Account/GetUserInfoById?id=${id}` })) as IResponseModel;\r\n    return data.data;\r\n  }\r\n  public static async getUserDetailById(id: any): Promise<IResponseModel> {\r\n    let data = (await fetchAPIGet({ url: `/api/Account/Get?id=${id}` })) as IResponseModel;\r\n    return data;\r\n  }\r\n\r\n  public static async uploadAvatar(singleFile: any): Promise<any> {\r\n    const token = await _getToken();\r\n    const id = await _getUserId();\r\n    if (singleFile != null) {\r\n      let res = await fetch(`${Environment.apiPost}/api/File/UploadImage`, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          Id: id,\r\n          FileName: \"avatar\",\r\n          FileExtension: \"\",\r\n          FileBase64String: singleFile,\r\n        }),\r\n        headers: {\r\n          // 'Content-Type': 'multipart/form-data; ',\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token ? `Bearer ${token}` : \"\",\r\n        },\r\n      });\r\n      let responseJson = (await res.json()) as IResponseModel;\r\n      if (responseJson.isSuccess == 1) {\r\n        return responseJson.data;\r\n      } else {\r\n        alert(responseJson.message);\r\n        return;\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  public static async updateUser(model: UserModel): Promise<any> {\r\n    const token = await _getToken();\r\n    let res = await fetch(`${Environment.apiPost}/api/Account/Update`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        avatarBase64: model.avatarBase64,\r\n        birthday: model.birthday,\r\n        code: model.code,\r\n        concurrencyStamp: model.concurrencyStamp,\r\n        createdBy: model.createdBy,\r\n        createdWhen: model.createdWhen,\r\n        email: model.email,\r\n        fullName: model.fullName,\r\n        gender: model.gender == \"true\" ? true : false,\r\n        id: model.id,\r\n        isEnabled: model.isEnabled,\r\n        isFirsttime: model.isFirsttime,\r\n        modifiedBy: model.modifiedBy,\r\n        modifiedWhen: model.modifiedWhen,\r\n        normalizedEmail: model.normalizedEmail,\r\n        normalizedUserName: model.normalizedUserName,\r\n        passWord: model.passWord,\r\n        passwordHash: model.passwordHash,\r\n        phoneNumber: model.phoneNumber,\r\n        position: model.position,\r\n        roleId: model.roleId,\r\n        securityStamp: model.securityStamp,\r\n        storeId: model.roleId,\r\n        storeName: model.storeName,\r\n        titleId: model.titleId,\r\n        title: model.title,\r\n        userName: model.userName,\r\n        isSendMail: model.isSendMail,\r\n        isSendInApp: model.isSendInApp,\r\n        isSendSMS: model.isSendSMS,\r\n        currencyMode: model.currencyMode,\r\n        workingHour: model.workingHour,\r\n      }),\r\n      headers: {\r\n        // 'Content-Type': 'multipart/form-data; ',\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token ? `Bearer ${token}` : \"\",\r\n      },\r\n    });\r\n    let responseJson = (await res.json()) as IResponseModel;\r\n    if (responseJson.isSuccess == 1) {\r\n      // alert(\"Upload Successful\");\r\n      return responseJson.data;\r\n    }\r\n    return;\r\n  }\r\n  public static async getMenuByUserId(id: any): Promise<any> {\r\n    let data = (await fetchAPIGet({ url: `/api/Page/GetMenuByUserId?userId=${id}` })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async updateFireBaseToken(token: any): Promise<any> {\r\n    let data = (await fetchAPIPost({ url: `/api/Account/UpdateFireBaseToken`, body: token })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async changePassword(body: { userId: number; currentPassWord: string; newPassWord: string }): Promise<any> {\r\n    let data = (await fetchAPIPost({ url: `/api/Account/ChangePassWord`, body })) as IResponseModel;\r\n    return data;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}