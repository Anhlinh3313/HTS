{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Environment } from \"../environment\";\nimport { _getToken } from \"./authService\";\nvar urlApi = Environment.apiPost;\nexport function fetchAPIGet(params) {\n  var url, _params$method, method, token, statusCode;\n\n  return _regeneratorRuntime.async(function fetchAPIGet$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          url = params.url, _params$method = params.method, method = _params$method === void 0 ? 'GET' : _params$method;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 3:\n          token = _context3.sent;\n          statusCode = 200;\n          return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n            fetch(urlApi + \"/\" + url, {\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': token ? \"Bearer \" + token : ''\n              },\n              method: method\n            }).then(function _callee(response) {\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      statusCode = response.status;\n\n                      if (!response.ok) {\n                        errorHandler(response.status);\n                      }\n\n                      _context.next = 4;\n                      return _regeneratorRuntime.awrap(response.json());\n\n                    case 4:\n                      return _context.abrupt(\"return\", _context.sent);\n\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }).then(function _callee2(responseJson) {\n              return _regeneratorRuntime.async(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      if (responseJson.isSuccess == 0) {\n                        alert(responseJson.message);\n                        resolve(responseJson);\n                      } else {\n                        resolve(responseJson);\n                      }\n\n                    case 1:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }).catch(function (error) {\n              resolve(null);\n              alert(\"FETCH API: \" + error.message);\n              reject(error);\n            });\n          }));\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function fetchAPIPost(params) {\n  var url, _params$method2, method, _params$body, body, token, statusCode;\n\n  return _regeneratorRuntime.async(function fetchAPIPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          url = params.url, _params$method2 = params.method, method = _params$method2 === void 0 ? 'POST' : _params$method2, _params$body = params.body, body = _params$body === void 0 ? '' : _params$body;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(_getToken());\n\n        case 3:\n          token = _context6.sent;\n          statusCode = 200;\n          _context6.next = 7;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            fetch(urlApi + \"/\" + url, {\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': token ? \"Bearer \" + token : ''\n              },\n              method: method,\n              body: JSON.stringify(body)\n            }).then(function _callee3(response) {\n              return _regeneratorRuntime.async(function _callee3$(_context4) {\n                while (1) {\n                  switch (_context4.prev = _context4.next) {\n                    case 0:\n                      statusCode = response.status;\n\n                      if (!response.ok) {\n                        errorHandler(response.status);\n                      }\n\n                      _context4.next = 4;\n                      return _regeneratorRuntime.awrap(response.json());\n\n                    case 4:\n                      return _context4.abrupt(\"return\", _context4.sent);\n\n                    case 5:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }).then(function _callee4(responseJson) {\n              return _regeneratorRuntime.async(function _callee4$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      if (responseJson.isSuccess == 0) {\n                        alert(responseJson.message);\n                        resolve(responseJson);\n                      } else {\n                        resolve(responseJson);\n                      }\n\n                    case 1:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }).catch(function (error) {\n              resolve(null);\n              alert(\"FETCH API: \" + error.message);\n              reject(error);\n            });\n          }));\n\n        case 7:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 8:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction errorHandler(errorCode) {\n  return _regeneratorRuntime.async(function errorHandler$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.t0 = errorCode;\n          _context7.next = _context7.t0 === 401 ? 3 : _context7.t0 === 500 ? 5 : 7;\n          break;\n\n        case 3:\n          alert('Authenticate Error');\n          return _context7.abrupt(\"break\", 8);\n\n        case 5:\n          alert('Server Error');\n          return _context7.abrupt(\"break\", 8);\n\n        case 7:\n          return _context7.abrupt(\"break\", 8);\n\n        case 8:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/netWorking/baseService.tsx"],"names":["Environment","_getToken","urlApi","apiPost","fetchAPIGet","params","url","method","token","statusCode","Promise","resolve","reject","fetch","headers","then","response","status","ok","errorHandler","json","responseJson","isSuccess","alert","message","catch","error","fetchAPIPost","body","JSON","stringify","errorCode"],"mappings":"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","sourcesContent":["import { DeviceEventEmitter } from \"react-native\";\r\nimport { Environment } from \"../environment\";\r\nimport { IResponseModel } from \"../models/IResponseModel\";\r\nimport { _getToken } from \"./authService\";\r\n\r\ninterface FetchObject {\r\n    url: string,\r\n    method?: 'GET' | 'POST' | 'PUT' | 'DELETE',\r\n    headers?: object,\r\n    body?: any,\r\n}\r\nconst urlApi = Environment.apiPost;\r\nexport async function fetchAPIGet(params: FetchObject) {\r\n    let { url, method = 'GET' }: any = params;\r\n    const token = await _getToken();\r\n    let statusCode = 200;\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${urlApi}/${url}`, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token ? `Bearer ${token}` : '',\r\n            },\r\n            method: method,\r\n        }).then(async response => {\r\n            statusCode = response.status;\r\n            if (!response.ok) {\r\n                errorHandler(response.status);\r\n            }\r\n            return await response.json() as IResponseModel;\r\n        }).then(async responseJson => {\r\n            if (responseJson.isSuccess == 0) {\r\n                alert(responseJson.message);\r\n                resolve(responseJson);\r\n            }\r\n            else{\r\n                resolve(responseJson);\r\n            }\r\n        }).catch(error => {\r\n            resolve(null);\r\n            alert(`FETCH API: ${error.message}`);\r\n            reject(error);\r\n        });\r\n    })\r\n}\r\n\r\nexport async function fetchAPIPost(params: FetchObject) {\r\n    let { url, method = 'POST', body = '' }: any = params;\r\n    const token = await _getToken();\r\n    let statusCode = 200;\r\n    return await new Promise((resolve, reject) => {\r\n        fetch(`${urlApi}/${url}`, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token ? `Bearer ${token}` : '',\r\n            },\r\n            method: method,\r\n            body:JSON.stringify(body)\r\n        }).then(async response => {\r\n            statusCode = response.status;\r\n            if (!response.ok) {\r\n                errorHandler(response.status);\r\n            }\r\n            return await response.json() as IResponseModel\r\n        }).then(async responseJson => {\r\n            if (responseJson.isSuccess == 0) {\r\n                alert(responseJson.message);\r\n                resolve(responseJson);\r\n            }\r\n            else{\r\n                resolve(responseJson);\r\n            }\r\n        }).catch(error => {\r\n            resolve(null);\r\n            alert(`FETCH API: ${error.message}`);\r\n            reject(error);\r\n        });\r\n    })\r\n}\r\nasync function errorHandler(errorCode: number) {\r\n    switch (errorCode) {\r\n        case 401:\r\n            alert('Authenticate Error');\r\n            break;\r\n\r\n        case 500:\r\n            alert('Server Error');\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}