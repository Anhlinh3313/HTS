{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar initialState = {\n  staffs: [],\n  part_time_staffs: [],\n  workingTimes: [],\n  workingPartTimes: [],\n  legends: [],\n  record_area: [],\n  reset: false\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _staffs = _toConsumableArray(state.staffs);\n\n  switch (action.type) {\n    case \"RESET_STAFFS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reset: !state.reset\n      });\n\n    case \"GET_STAFFS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        staffs: action.payload\n      });\n\n    case \"UPDATE_STAFF\":\n      var i = _staffs.findIndex(function (item) {\n        return item.id === action.payload.id;\n      });\n\n      _staffs[i].phone = action.payload.phone;\n      _staffs[i].email = action.payload.email;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        staffs: _staffs\n      });\n\n    case \"GET_ALL_WORKING_TIME\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        workingTimes: action.payload\n      });\n\n    case \"GET_ALL_WORKING_PART_TIME\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        workingPartTimes: action.payload\n      });\n\n    case \"GET_ALL_LEGEND\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        legends: action.payload\n      });\n\n    case \"GET_ALL_RECORD_AREA\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        record_area: action.payload\n      });\n\n    case \"GET_ALL_WORKING_TIME_BY_STAFF\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        staffs: _staffs\n      });\n\n    case \"CREATE_WORKING_TIME_BY_STAFF\":\n      var __i = _staffs.findIndex(function (item) {\n        return item.id === action.payload.StaffId;\n      });\n\n      var staffSchedule = _staffs[__i].workingScheduleData.slice();\n\n      var staffTimeData = JSON.parse(JSON.stringify(_staffs[__i].staffWorkingDayTimeData));\n      action.payload.WorkingScheduleData.map(function (schedule) {\n        var iSchedule = _staffs[__i].staffWorkingDayTimeData.findIndex(function (item) {\n          return item.WorkingDate == schedule.WorkingDate;\n        });\n\n        if (iSchedule !== -1) {\n          staffSchedule[iSchedule] = schedule;\n          var _arrStaffTimeData = [];\n\n          if (schedule.staffWorkingDayTimeData) {\n            schedule.staffWorkingDayTimeData.map(function (time) {\n              var check = staffTimeData[iSchedule].staffWorkingDayTimeData.findIndex(function (i) {\n                return i.workingTimeId == time.workingTimeId;\n              });\n\n              if (check == -1) {\n                _arrStaffTimeData.push(time);\n              }\n            });\n          }\n\n          staffTimeData[iSchedule].staffWorkingDayTimeData = [].concat(_toConsumableArray(staffTimeData[iSchedule].staffWorkingDayTimeData), _arrStaffTimeData);\n        }\n      });\n      _staffs[__i].isConfirm = action.payload.isConfirm;\n      _staffs[__i].edited = true;\n      _staffs[__i].workingScheduleData = staffSchedule;\n      _staffs[__i].staffWorkingDayTimeData = staffTimeData;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        staffs: _staffs\n      });\n\n    case \"CHANGE_CONFIRM\":\n      var indexChangeConfirm = _staffs.findIndex(function (item) {\n        return item.id === action.payload;\n      });\n\n      _staffs[indexChangeConfirm].isConfirm = false;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        staffs: _staffs\n      });\n\n    case \"GET_STAFF_PART_TIME\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        part_time_staffs: action.payload\n      });\n\n    case \"UPDATE_STAFF_PART_TIME\":\n      var _part_time_staffs = _toConsumableArray(state.part_time_staffs);\n\n      var indexStaffPart = _part_time_staffs.findIndex(function (item) {\n        return item.staffId === action.payload.StaffId;\n      });\n\n      var indexDatePart = _part_time_staffs[indexStaffPart].staffFreeTimeInfo.findIndex(function (item) {\n        return item.rank === action.payload.dataUpdate.Rank;\n      });\n\n      _part_time_staffs[indexStaffPart].staffFreeTimeInfo[indexDatePart].staffFreeTimeList.map(function (item, index) {\n        if (action.payload.dataUpdate.WorkingTimeId.includes(item.timeOrder)) {\n          _part_time_staffs[indexStaffPart].staffFreeTimeInfo[indexDatePart].staffFreeTimeList[index].managementAgree = true;\n        }\n      });\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        part_time_staffs: _part_time_staffs\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/redux/reducers/staffReducer.tsx"],"names":["initialState","staffs","part_time_staffs","workingTimes","workingPartTimes","legends","record_area","reset","reducer","state","action","_staffs","type","payload","i","findIndex","item","id","phone","email","__i","StaffId","staffSchedule","workingScheduleData","slice","staffTimeData","JSON","parse","stringify","staffWorkingDayTimeData","WorkingScheduleData","map","schedule","iSchedule","WorkingDate","_arrStaffTimeData","time","check","workingTimeId","push","isConfirm","edited","indexChangeConfirm","_part_time_staffs","indexStaffPart","staffId","indexDatePart","staffFreeTimeInfo","rank","dataUpdate","Rank","staffFreeTimeList","index","WorkingTimeId","includes","timeOrder","managementAgree"],"mappings":"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","sourcesContent":["import { StaffActions } from \"../actions/staffAction\";\r\nimport { IStaff, IWorkingTime, IPicker, IStaffPartTime } from \"../../models/staffModel\";\r\ntype AppState = {\r\n  staffs: IStaff[];\r\n  part_time_staffs: IStaffPartTime[];\r\n  workingTimes: IWorkingTime[];\r\n  workingPartTimes: IWorkingTime[];\r\n  legends: IPicker[];\r\n  record_area: IPicker[];\r\n  reset: boolean;\r\n};\r\nconst initialState: AppState = {\r\n  staffs: [],\r\n  part_time_staffs: [],\r\n  workingTimes: [],\r\n  workingPartTimes: [],\r\n  legends: [],\r\n  record_area: [],\r\n  reset: false,\r\n};\r\nconst reducer = (state: AppState = initialState, action: StaffActions) => {\r\n  let _staffs = [...state.staffs];\r\n  switch (action.type) {\r\n    case \"RESET_STAFFS\":\r\n      return {\r\n        ...state,\r\n        reset: !state.reset,\r\n      };\r\n    case \"GET_STAFFS\":\r\n      return {\r\n        ...state,\r\n        staffs: action.payload,\r\n      };\r\n    case \"UPDATE_STAFF\":\r\n      let i = _staffs.findIndex(item => item.id === action.payload.id);\r\n      _staffs[i].phone = action.payload.phone;\r\n      _staffs[i].email = action.payload.email;\r\n      return {\r\n        ...state,\r\n        staffs: _staffs,\r\n      };\r\n    case \"GET_ALL_WORKING_TIME\":\r\n      return {\r\n        ...state,\r\n        workingTimes: action.payload,\r\n      };\r\n    case \"GET_ALL_WORKING_PART_TIME\":\r\n      return {\r\n        ...state,\r\n        workingPartTimes: action.payload,\r\n      };\r\n    case \"GET_ALL_LEGEND\":\r\n      return {\r\n        ...state,\r\n        legends: action.payload,\r\n      };\r\n    case \"GET_ALL_RECORD_AREA\":\r\n      return {\r\n        ...state,\r\n        record_area: action.payload,\r\n      };\r\n    case \"GET_ALL_WORKING_TIME_BY_STAFF\":\r\n      // let _i = __staffs.findIndex(item => item.id === action.payload.id);\r\n      // __staffs[_i].workingScheduleData[action.payload.index].WorkingWeekTime = action.payload.data;\r\n      return {\r\n        ...state,\r\n        staffs: _staffs,\r\n      };\r\n    case \"CREATE_WORKING_TIME_BY_STAFF\":\r\n      let __i = _staffs.findIndex(item => item.id === action.payload.StaffId); // tìm id staff\r\n      let staffSchedule = _staffs[__i].workingScheduleData.slice(); // clone schedule staff\r\n      let staffTimeData = JSON.parse(JSON.stringify(_staffs[__i].staffWorkingDayTimeData)); // clone schedule staff\r\n      action.payload.WorkingScheduleData.map(schedule => {\r\n        let iSchedule = _staffs[__i].staffWorkingDayTimeData.findIndex(item => item.WorkingDate == schedule.WorkingDate);\r\n        if (iSchedule !== -1) {\r\n          staffSchedule[iSchedule] = schedule;\r\n          let _arrStaffTimeData = []\r\n          if(schedule.staffWorkingDayTimeData){\r\n            schedule.staffWorkingDayTimeData.map(time => {\r\n              let check = staffTimeData[iSchedule].staffWorkingDayTimeData.findIndex(i => i.workingTimeId == time.workingTimeId)\r\n              if (check == -1) {\r\n                _arrStaffTimeData.push(time)\r\n              }\r\n            })\r\n          }\r\n          staffTimeData[iSchedule].staffWorkingDayTimeData = [...staffTimeData[iSchedule].staffWorkingDayTimeData, ..._arrStaffTimeData]\r\n\r\n        }\r\n      });\r\n\r\n      _staffs[__i].isConfirm = action.payload.isConfirm;\r\n      _staffs[__i].edited = true;\r\n      _staffs[__i].workingScheduleData = staffSchedule;\r\n      _staffs[__i].staffWorkingDayTimeData = staffTimeData;\r\n\r\n      return {\r\n        ...state,\r\n        staffs: _staffs,\r\n      };\r\n    case \"CHANGE_CONFIRM\":\r\n      let indexChangeConfirm = _staffs.findIndex(item => item.id === action.payload);\r\n      _staffs[indexChangeConfirm].isConfirm = false;\r\n      return {\r\n        ...state,\r\n        staffs: _staffs,\r\n      };\r\n    case \"GET_STAFF_PART_TIME\":\r\n      return {\r\n        ...state,\r\n        part_time_staffs: action.payload,\r\n      };\r\n    case \"UPDATE_STAFF_PART_TIME\":\r\n      let _part_time_staffs = [...state.part_time_staffs];\r\n      let indexStaffPart = _part_time_staffs.findIndex(item => item.staffId === action.payload.StaffId);\r\n      let indexDatePart = _part_time_staffs[indexStaffPart].staffFreeTimeInfo.findIndex(\r\n        item => item.rank === action.payload.dataUpdate.Rank\r\n      );\r\n      _part_time_staffs[indexStaffPart].staffFreeTimeInfo[indexDatePart].staffFreeTimeList.map((item, index) => {\r\n        if (action.payload.dataUpdate.WorkingTimeId.includes(item.timeOrder)) {\r\n          _part_time_staffs[indexStaffPart].staffFreeTimeInfo[indexDatePart].staffFreeTimeList[index].managementAgree = true;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        part_time_staffs: _part_time_staffs,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}