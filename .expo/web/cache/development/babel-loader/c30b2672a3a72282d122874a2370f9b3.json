{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\angular\\\\hts_reactnative\\\\src\\\\app\\\\components\\\\dropDown\\\\DropDown.tsx\";\n\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { colors } from \"../../utils/Colors\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { TouchableHighlight, ScrollView } from \"react-native-gesture-handler\";\n\nvar DropDown = function DropDown(_ref) {\n  var _ref2;\n\n  var data = _ref.data,\n      _ref$defaultLabel = _ref.defaultLabel,\n      defaultLabel = _ref$defaultLabel === void 0 ? \"Choose Item\" : _ref$defaultLabel,\n      backgroundColor = _ref.backgroundColor,\n      heightContent = _ref.heightContent,\n      onSelected = _ref.onSelected,\n      value = _ref.value;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isShowDropdow = _useState2[0],\n      setIsShowDropdow = _useState2[1];\n\n  var _useState3 = useState((_ref2 = defaultLabel != null ? defaultLabel : value.label) != null ? _ref2 : ''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      categoryName = _useState4[0],\n      setCategoryName = _useState4[1];\n\n  var onSelectedItem = function onSelectedItem(val) {\n    var _val$label;\n\n    onSelected(val);\n    setCategoryName((_val$label = val.label) != null ? _val$label : '');\n    setIsShowDropdow(!isShowDropdow);\n  };\n\n  useEffect(function () {\n    if (value) {\n      setCategoryName(value.label);\n    }\n  }, [value]);\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: {\n      height: 50\n    },\n    underlayColor: 'transparent',\n    onPress: function onPress() {\n      setIsShowDropdow(!isShowDropdow);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: [styles.viewPickCategory, backgroundColor != null ? backgroundColor : {\n      backgroundColor: '#303030'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: {\n      height: 40,\n      justifyContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: colors.white,\n      fontSize: 16,\n      paddingLeft: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }\n  }, categoryName)), React.createElement(Ionicons, {\n    style: styles.iconDown,\n    name: \"caret-down\",\n    size: 20,\n    color: \"#fff\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }))), isShowDropdow && React.createElement(View, {\n    style: {\n      backgroundColor: '#303030',\n      borderRadius: 4,\n      paddingVertical: 18,\n      position: 'absolute',\n      zIndex: 1000,\n      right: 0,\n      left: 0,\n      top: 47,\n      shadowColor: \"#000\",\n      shadowOffset: {\n        width: 0,\n        height: 2\n      },\n      shadowOpacity: 0.25,\n      shadowRadius: 3.84,\n      elevation: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: [heightContent ? {\n      height: heightContent\n    } : {\n      height: 150\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, React.createElement(ScrollView, {\n    nestedScrollEnabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, data.map(function (item, index) {\n    return React.createElement(TouchableHighlight, {\n      key: index,\n      underlayColor: '#675E50',\n      onPress: function onPress() {\n        return onSelectedItem(item);\n      },\n      style: styles.itemDropDown,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 37\n      }\n    }, React.createElement(Text, {\n      numberOfLines: 1,\n      style: styles.text,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 41\n      }\n    }, item.label));\n  })))));\n};\n\nexport default DropDown;\nvar styles = StyleSheet.create({\n  text: {\n    color: colors.white,\n    fontSize: 14,\n    fontWeight: '600'\n  },\n  itemDropDown: {\n    padding: 10,\n    paddingLeft: 18,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  iconDown: {\n    justifyContent: 'center',\n    position: 'absolute',\n    right: 5,\n    zIndex: 4\n  },\n  viewPickCategory: {\n    marginTop: 5,\n    borderRadius: 4,\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/components/dropDown/DropDown.tsx"],"names":["React","useState","useEffect","colors","Ionicons","TouchableHighlight","ScrollView","DropDown","data","defaultLabel","backgroundColor","heightContent","onSelected","value","isShowDropdow","setIsShowDropdow","label","categoryName","setCategoryName","onSelectedItem","val","height","styles","viewPickCategory","justifyContent","color","white","fontSize","paddingLeft","iconDown","borderRadius","paddingVertical","position","zIndex","right","left","top","shadowColor","shadowOffset","width","shadowOpacity","shadowRadius","elevation","map","item","index","itemDropDown","text","StyleSheet","create","fontWeight","padding","flexDirection","alignItems","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Modal, View, Text, ActivityIndicator, StyleSheet, FlatList, StyleProp, ViewStyle } from \"react-native\";\r\nimport { Imodel } from \"../../models/Imodel\";\r\nimport { colors } from \"../../utils/Colors\";\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { TouchableHighlight, TouchableOpacity, ScrollView } from \"react-native-gesture-handler\";\r\nconst DropDown = ({\r\n    data,\r\n    defaultLabel = \"Choose Item\",\r\n    backgroundColor,\r\n    heightContent,\r\n    onSelected,\r\n    value,\r\n}: {\r\n    data: Imodel[];\r\n    defaultLabel?: string;\r\n    backgroundColor?:StyleProp<ViewStyle>\r\n    heightContent?:number\r\n    onSelected: (values: Imodel) => void;\r\n    value?:Imodel\r\n}) => {\r\n    //bỏ đi thằng vừa chọn không load lại bị bug\r\n    // data.splice(0, 1);\r\n    const [isShowDropdow, setIsShowDropdow] = useState(false);\r\n    const [categoryName, setCategoryName] = useState<string>(defaultLabel ?? value.label??'')\r\n    const onSelectedItem = (val: Imodel) => {\r\n        onSelected(val);\r\n        setCategoryName(val.label ?? '');\r\n        setIsShowDropdow(!isShowDropdow);\r\n    }\r\n    useEffect(() => {\r\n        if(value){\r\n            setCategoryName(value.label)\r\n        }\r\n    }, [value])\r\n    return (\r\n        <View>\r\n            <TouchableHighlight\r\n                style={{ height: 50 }}\r\n                underlayColor={'transparent'}\r\n                onPress={() => {\r\n                    setIsShowDropdow(!isShowDropdow);\r\n                }}\r\n            >\r\n\r\n                <View style={[styles.viewPickCategory,backgroundColor??{backgroundColor:'#303030'}]}>\r\n                    <View style={{ height: 40, justifyContent: 'center' }}>\r\n                        <Text style={{ color: colors.white, fontSize: 16, paddingLeft: 10, }}>{categoryName}</Text>\r\n                    </View>\r\n\r\n                    <Ionicons style={styles.iconDown} name=\"caret-down\" size={20} color=\"#fff\" />\r\n                </View>\r\n            </TouchableHighlight>\r\n            {\r\n                isShowDropdow &&\r\n                <View style={{ backgroundColor: '#303030', borderRadius: 4, paddingVertical: 18, position: 'absolute', zIndex: 1000, right: 0, left: 0, top: 47,\r\n                                shadowColor: \"#000\",\r\n                                shadowOffset: { width: 0, height: 2 },\r\n                                shadowOpacity: 0.25,\r\n                                shadowRadius: 3.84, elevation: 5 }}>\r\n                    <View style={[heightContent?{height:heightContent}:{height:150 }]}>\r\n                        <ScrollView\r\n                            nestedScrollEnabled\r\n                        >\r\n                            {\r\n                                data.map((item,index) => (\r\n                                    <TouchableHighlight\r\n                                        key={index}\r\n                                        underlayColor={'#675E50'}\r\n                                        onPress={() => onSelectedItem(item)}\r\n                                        style={styles.itemDropDown}>\r\n                                        <Text numberOfLines={1} style={styles.text}>{item.label}</Text>\r\n\r\n                                    </TouchableHighlight>\r\n                                ))\r\n                            }\r\n                        </ScrollView>\r\n\r\n                    </View>\r\n                </View>\r\n            }\r\n        </View>\r\n    );\r\n}\r\nexport default DropDown;\r\nconst styles = StyleSheet.create({\r\n    text: {\r\n        color: colors.white,\r\n        fontSize: 14,\r\n        fontWeight: '600'\r\n    },\r\n    itemDropDown: {\r\n        padding: 10,\r\n        paddingLeft:18,\r\n        flexDirection: 'row',\r\n        alignItems: 'center'\r\n    },\r\n    iconDown: {\r\n        justifyContent: 'center',\r\n        position: 'absolute',\r\n        right:5,\r\n        zIndex: 4\r\n    },\r\n    viewPickCategory: {\r\n        marginTop: 5,\r\n        // backgroundColor: '#303030',\r\n        borderRadius: 4, justifyContent:'center'\r\n    },\r\n})"]},"metadata":{},"sourceType":"module"}