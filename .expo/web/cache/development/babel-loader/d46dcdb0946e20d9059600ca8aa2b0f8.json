{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Environment } from \"../environment\";\nimport { _getToken } from \"./authService\";\nimport { fetchAPIGet, fetchAPIPost } from \"./baseService\";\nvar url = Environment.apiPost;\nexport var StaffService = function () {\n  function StaffService() {\n    _classCallCheck(this, StaffService);\n  }\n\n  _createClass(StaffService, null, [{\n    key: \"getStaffInfo\",\n    value: function getStaffInfo(StaffId, PositionId, RecordAreaId, WorkplaceId, PageNum, PageSize) {\n      var data;\n      return _regeneratorRuntime.async(function getStaffInfo$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetStaffInfo\",\n                body: {\n                  StaffId: StaffId,\n                  PositionId: PositionId,\n                  RecordAreaId: RecordAreaId,\n                  WorkplaceId: WorkplaceId,\n                  PageNum: PageNum,\n                  PageSize: PageSize\n                }\n              }));\n\n            case 2:\n              data = _context.sent;\n              return _context.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"createStaff\",\n    value: function createStaff(req) {\n      var data;\n      return _regeneratorRuntime.async(function createStaff$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/Create\",\n                body: {\n                  FirstName: req.firstName,\n                  LastName: req.lastName,\n                  Phone: req.phone,\n                  Email: req.email,\n                  PositionId: req.positionId,\n                  RecordAreaId: req.recordAreaId,\n                  DutyId: req.dutyId,\n                  TitleId: req.titleId,\n                  WorkplaceId: req.WorkplaceId\n                }\n              }));\n\n            case 2:\n              data = _context2.sent;\n              return _context2.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"updateStaff\",\n    value: function updateStaff(req) {\n      var data;\n      return _regeneratorRuntime.async(function updateStaff$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/Update\",\n                body: {\n                  Id: req.id,\n                  IsEnabled: req.isEnabled,\n                  FirstName: req.firstName,\n                  LastName: req.lastName,\n                  Phone: req.phone,\n                  Email: req.email,\n                  PositionId: req.positionId,\n                  RecordAreaId: req.recordAreaId,\n                  DutyId: req.dutyId\n                }\n              }));\n\n            case 2:\n              data = _context3.sent;\n              return _context3.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"createWorking\",\n    value: function createWorking(StaffData) {\n      var data;\n      return _regeneratorRuntime.async(function createWorking$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/CreateWorking\",\n                body: {\n                  StaffData: StaffData\n                }\n              }));\n\n            case 2:\n              data = _context4.sent;\n              return _context4.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getAllWorkingTimeByStaff\",\n    value: function getAllWorkingTimeByStaff(StaffId, DateTime) {\n      var data;\n      return _regeneratorRuntime.async(function getAllWorkingTimeByStaff$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetWorkingTimeByStaff\",\n                body: {\n                  StaffId: StaffId,\n                  DateTime: DateTime\n                }\n              }));\n\n            case 2:\n              data = _context5.sent;\n              return _context5.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getAllDuty\",\n    value: function getAllDuty() {\n      var data;\n      return _regeneratorRuntime.async(function getAllDuty$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIGet({\n                url: \"/api/Staff/GetAllDuty\"\n              }));\n\n            case 2:\n              data = _context6.sent;\n              return _context6.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getAllPosition\",\n    value: function getAllPosition() {\n      var data;\n      return _regeneratorRuntime.async(function getAllPosition$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIGet({\n                url: \"/api/Staff/GetAllPosition\"\n              }));\n\n            case 2:\n              data = _context7.sent;\n              return _context7.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getAllRecordArea\",\n    value: function getAllRecordArea() {\n      var data;\n      return _regeneratorRuntime.async(function getAllRecordArea$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIGet({\n                url: \"/api/Staff/GetAllRecordArea\"\n              }));\n\n            case 2:\n              data = _context8.sent;\n              return _context8.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getAllLegend\",\n    value: function getAllLegend() {\n      var data;\n      return _regeneratorRuntime.async(function getAllLegend$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIGet({\n                url: \"/api/Staff/GetAllLegend\"\n              }));\n\n            case 2:\n              data = _context9.sent;\n              return _context9.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getAllWorkingTime\",\n    value: function getAllWorkingTime() {\n      var data;\n      return _regeneratorRuntime.async(function getAllWorkingTime$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIGet({\n                url: \"/api/Staff/GetAllWorkingTime\"\n              }));\n\n            case 2:\n              data = _context10.sent;\n              return _context10.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"GetListOfStarf\",\n    value: function GetListOfStarf(DateFrom, DateTo, ListStaff) {\n      var data;\n      return _regeneratorRuntime.async(function GetListOfStarf$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetListOfStarf\",\n                body: {\n                  DateFrom: DateFrom,\n                  DateTo: DateTo,\n                  ListStaff: ListStaff\n                }\n              }));\n\n            case 2:\n              data = _context11.sent;\n              return _context11.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getAllWorkingTimeFreeStaff\",\n    value: function getAllWorkingTimeFreeStaff() {\n      var data;\n      return _regeneratorRuntime.async(function getAllWorkingTimeFreeStaff$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIGet({\n                url: \"/api/Staff/GetAllWorkingTimeFreeStaff\"\n              }));\n\n            case 2:\n              data = _context12.sent;\n              return _context12.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getFreeStaff\",\n    value: function getFreeStaff(DateFrom, DateTo, RecordAreaId) {\n      var data;\n      return _regeneratorRuntime.async(function getFreeStaff$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetFreeStaff\",\n                body: {\n                  DateFrom: DateFrom,\n                  DateTo: DateTo,\n                  RecordAreaId: RecordAreaId\n                }\n              }));\n\n            case 2:\n              data = _context13.sent;\n              return _context13.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"createStaffFreeTime\",\n    value: function createStaffFreeTime(StaffFreeTimesList) {\n      var data;\n      return _regeneratorRuntime.async(function createStaffFreeTime$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/CreateStaffFreeTime\",\n                body: {\n                  StaffFreeTimesList: StaffFreeTimesList\n                }\n              }));\n\n            case 2:\n              data = _context14.sent;\n              return _context14.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"updateStaffFreeTime\",\n    value: function updateStaffFreeTime(StaffId, StaffFreeTimesList) {\n      var data;\n      return _regeneratorRuntime.async(function updateStaffFreeTime$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/UpdateStaffFreeTime\",\n                body: {\n                  StaffId: StaffId,\n                  StaffFreeTimesList: StaffFreeTimesList\n                }\n              }));\n\n            case 2:\n              data = _context15.sent;\n              return _context15.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle(SearchText, PageNum, PageSize, ClientId, WorkplaceId) {\n      var data;\n      return _regeneratorRuntime.async(function getTitle$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Title/GetTitle\",\n                body: {\n                  SearchText: SearchText,\n                  PageNum: PageNum,\n                  PageSize: PageSize,\n                  ClientId: ClientId,\n                  WorkplaceId: WorkplaceId\n                }\n              }));\n\n            case 2:\n              data = _context16.sent;\n              return _context16.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return StaffService;\n}();\nexport var ReportStaffService = function () {\n  function ReportStaffService() {\n    _classCallCheck(this, ReportStaffService);\n  }\n\n  _createClass(ReportStaffService, null, [{\n    key: \"getHourStoreService\",\n    value: function getHourStoreService(DateTime, RecordAreaId) {\n      var data;\n      return _regeneratorRuntime.async(function getHourStoreService$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetHourStoreService\",\n                body: {\n                  DateTime: DateTime,\n                  RecordAreaId: RecordAreaId\n                }\n              }));\n\n            case 2:\n              data = _context17.sent;\n              return _context17.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getStaffByRecordArea\",\n    value: function getStaffByRecordArea(RecordAreaId) {\n      var data;\n      return _regeneratorRuntime.async(function getStaffByRecordArea$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetStaffByRecordArea\",\n                body: {\n                  RecordAreaId: RecordAreaId\n                }\n              }));\n\n            case 2:\n              data = _context18.sent;\n              return _context18.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getWeeklyDynamicCrewScheduleByStaff\",\n    value: function getWeeklyDynamicCrewScheduleByStaff(StaffId, DateTime, RecordAreaId) {\n      var data;\n      return _regeneratorRuntime.async(function getWeeklyDynamicCrewScheduleByStaff$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetWeeklyDynamicCrewScheduleByStaff\",\n                body: {\n                  StaffId: StaffId,\n                  DateTime: DateTime,\n                  RecordAreaId: RecordAreaId\n                }\n              }));\n\n            case 2:\n              data = _context19.sent;\n              return _context19.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getListStaffWeeklyDynamicCrewSchedule\",\n    value: function getListStaffWeeklyDynamicCrewSchedule() {\n      var RecordAreaId,\n          DateFrom,\n          DateTo,\n          data,\n          _args20 = arguments;\n      return _regeneratorRuntime.async(function getListStaffWeeklyDynamicCrewSchedule$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              RecordAreaId = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : null;\n              DateFrom = _args20.length > 1 ? _args20[1] : undefined;\n              DateTo = _args20.length > 2 ? _args20[2] : undefined;\n              _context20.next = 5;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetListStaffWeeklyDynamicCrewSchedule\",\n                body: {\n                  RecordAreaId: RecordAreaId,\n                  DateFrom: DateFrom,\n                  DateTo: DateTo\n                }\n              }));\n\n            case 5:\n              data = _context20.sent;\n              return _context20.abrupt(\"return\", data);\n\n            case 7:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getListOfficeAttendanceRecord\",\n    value: function getListOfficeAttendanceRecord(DateFrom, DateTo, PositionId) {\n      var data;\n      return _regeneratorRuntime.async(function getListOfficeAttendanceRecord$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetListOfficeAttendanceRecord\",\n                body: {\n                  DateFrom: DateFrom,\n                  DateTo: DateTo,\n                  PositionId: PositionId\n                }\n              }));\n\n            case 2:\n              data = _context21.sent;\n              return _context21.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"updateOfficeAttendanceRecord\",\n    value: function updateOfficeAttendanceRecord(PositionId, ListWorkingSchedule) {\n      var data;\n      return _regeneratorRuntime.async(function updateOfficeAttendanceRecord$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/UpdateOfficeAttendanceRecord\",\n                body: {\n                  PositionId: PositionId,\n                  ListWorkingSchedule: ListWorkingSchedule\n                }\n              }));\n\n            case 2:\n              data = _context22.sent;\n              return _context22.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getOverTimeOTRecordInfo\",\n    value: function getOverTimeOTRecordInfo(DateFrom, DateTo, RecordAreaId) {\n      var data;\n      return _regeneratorRuntime.async(function getOverTimeOTRecordInfo$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetOverTimeOTRecordInfo\",\n                body: {\n                  DateFrom: DateFrom,\n                  DateTo: DateTo,\n                  RecordAreaId: RecordAreaId\n                }\n              }));\n\n            case 2:\n              data = _context23.sent;\n              return _context23.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getOverTimeOTRecord\",\n    value: function getOverTimeOTRecord(DateTime, RecordAreaId) {\n      var data;\n      return _regeneratorRuntime.async(function getOverTimeOTRecord$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetOverTimeOTRecord\",\n                body: {\n                  DateTime: DateTime,\n                  RecordAreaId: RecordAreaId\n                }\n              }));\n\n            case 2:\n              data = _context24.sent;\n              return _context24.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"updateOverTimeOTRecordByDay\",\n    value: function updateOverTimeOTRecordByDay(OverTimeOTRecordByDayInfo) {\n      var data;\n      return _regeneratorRuntime.async(function updateOverTimeOTRecordByDay$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/UpdateOverTimeOTRecordByDay\",\n                body: {\n                  OverTimeOTRecordByDayInfo: OverTimeOTRecordByDayInfo\n                }\n              }));\n\n            case 2:\n              data = _context25.sent;\n              return _context25.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"GetWeeklyPartTimeSchedule\",\n    value: function GetWeeklyPartTimeSchedule(DateFrom, DateTo) {\n      var data;\n      return _regeneratorRuntime.async(function GetWeeklyPartTimeSchedule$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return _regeneratorRuntime.awrap(fetchAPIPost({\n                url: \"/api/Staff/GetWeeklyPartTimeSchedule\",\n                body: {\n                  DateFrom: DateFrom,\n                  DateTo: DateTo\n                }\n              }));\n\n            case 2:\n              data = _context26.sent;\n              return _context26.abrupt(\"return\", data);\n\n            case 4:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return ReportStaffService;\n}();\nexport var MailStaffService = function () {\n  function MailStaffService() {\n    _classCallCheck(this, MailStaffService);\n  }\n\n  _createClass(MailStaffService, null, [{\n    key: \"sendMailWorkingTimeByStaff\",\n    value: function sendMailWorkingTimeByStaff(ListMail) {\n      var token, response, json;\n      return _regeneratorRuntime.async(function sendMailWorkingTimeByStaff$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              _context27.next = 2;\n              return _regeneratorRuntime.awrap(_getToken());\n\n            case 2:\n              token = _context27.sent;\n              _context27.prev = 3;\n              _context27.next = 6;\n              return _regeneratorRuntime.awrap(fetch(url + \"/api/Staff/SendMailWorkingTimeByStaff\", {\n                method: \"POST\",\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\",\n                  Authorization: token ? \"Bearer \" + token : \"\"\n                },\n                body: JSON.stringify({\n                  ListMail: ListMail\n                })\n              }));\n\n            case 6:\n              response = _context27.sent;\n              _context27.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              json = _context27.sent;\n              return _context27.abrupt(\"return\", json);\n\n            case 13:\n              _context27.prev = 13;\n              _context27.t0 = _context27[\"catch\"](3);\n              console.error(_context27.t0);\n              return _context27.abrupt(\"return\", _context27.t0);\n\n            case 17:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, null, null, [[3, 13]], Promise);\n    }\n  }, {\n    key: \"sendMailWeeklyCrewsCheduleAndOTForecastSample\",\n    value: function sendMailWeeklyCrewsCheduleAndOTForecastSample(DateTime, Description, Mail) {\n      var token, response, json;\n      return _regeneratorRuntime.async(function sendMailWeeklyCrewsCheduleAndOTForecastSample$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.next = 2;\n              return _regeneratorRuntime.awrap(_getToken());\n\n            case 2:\n              token = _context28.sent;\n              _context28.prev = 3;\n              _context28.next = 6;\n              return _regeneratorRuntime.awrap(fetch(url + \"/api/Staff/SendMailWeeklyCrewsCheduleAndOTForecastSample\", {\n                method: \"POST\",\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\",\n                  Authorization: token ? \"Bearer \" + token : \"\"\n                },\n                body: JSON.stringify({\n                  DateTime: DateTime,\n                  Description: Description,\n                  Mail: Mail\n                })\n              }));\n\n            case 6:\n              response = _context28.sent;\n              _context28.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              json = _context28.sent;\n              return _context28.abrupt(\"return\", json);\n\n            case 13:\n              _context28.prev = 13;\n              _context28.t0 = _context28[\"catch\"](3);\n              console.error(_context28.t0);\n              return _context28.abrupt(\"return\", _context28.t0);\n\n            case 17:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, null, null, [[3, 13]], Promise);\n    }\n  }, {\n    key: \"sendMailWeeklyDynamicCrewSchedule\",\n    value: function sendMailWeeklyDynamicCrewSchedule(Description, Mail, StringDateFrom, StringDateTo) {\n      var token, response, json;\n      return _regeneratorRuntime.async(function sendMailWeeklyDynamicCrewSchedule$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              _context29.next = 2;\n              return _regeneratorRuntime.awrap(_getToken());\n\n            case 2:\n              token = _context29.sent;\n              _context29.prev = 3;\n              _context29.next = 6;\n              return _regeneratorRuntime.awrap(fetch(url + \"/api/Staff/SendMailWeeklyDynamicCrewSchedule\", {\n                method: \"POST\",\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\",\n                  Authorization: token ? \"Bearer \" + token : \"\"\n                },\n                body: JSON.stringify({\n                  Description: Description,\n                  Mail: Mail,\n                  StringDateFrom: StringDateFrom,\n                  StringDateTo: StringDateTo\n                })\n              }));\n\n            case 6:\n              response = _context29.sent;\n              _context29.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              json = _context29.sent;\n              return _context29.abrupt(\"return\", json);\n\n            case 13:\n              _context29.prev = 13;\n              _context29.t0 = _context29[\"catch\"](3);\n              console.error(_context29.t0);\n              return _context29.abrupt(\"return\", _context29.t0);\n\n            case 17:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, null, null, [[3, 13]], Promise);\n    }\n  }, {\n    key: \"sendMailOfficeAttendanceRecord\",\n    value: function sendMailOfficeAttendanceRecord(Description, Mail, Preparedby, Verifiedby, DateFrom, DateTo, PositionId) {\n      var token, response, json;\n      return _regeneratorRuntime.async(function sendMailOfficeAttendanceRecord$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              _context30.next = 2;\n              return _regeneratorRuntime.awrap(_getToken());\n\n            case 2:\n              token = _context30.sent;\n              _context30.prev = 3;\n              _context30.next = 6;\n              return _regeneratorRuntime.awrap(fetch(url + \"/api/Staff/SendMailOfficeAttendanceRecord\", {\n                method: \"POST\",\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\",\n                  Authorization: token ? \"Bearer \" + token : \"\"\n                },\n                body: JSON.stringify({\n                  Description: Description,\n                  Mail: Mail,\n                  Preparedby: Preparedby,\n                  Verifiedby: Verifiedby,\n                  DateFrom: DateFrom,\n                  DateTo: DateTo,\n                  PositionId: PositionId\n                })\n              }));\n\n            case 6:\n              response = _context30.sent;\n              _context30.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              json = _context30.sent;\n              return _context30.abrupt(\"return\", json);\n\n            case 13:\n              _context30.prev = 13;\n              _context30.t0 = _context30[\"catch\"](3);\n              console.error(_context30.t0);\n              return _context30.abrupt(\"return\", _context30.t0);\n\n            case 17:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, null, null, [[3, 13]], Promise);\n    }\n  }, {\n    key: \"sendMailOverTimeOTRecord\",\n    value: function sendMailOverTimeOTRecord(Description, Mail, DateFrom, DateTo) {\n      var token, response, json;\n      return _regeneratorRuntime.async(function sendMailOverTimeOTRecord$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              _context31.next = 2;\n              return _regeneratorRuntime.awrap(_getToken());\n\n            case 2:\n              token = _context31.sent;\n              _context31.prev = 3;\n              _context31.next = 6;\n              return _regeneratorRuntime.awrap(fetch(url + \"/api/Staff/SendMailOverTimeOTRecord\", {\n                method: \"POST\",\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\",\n                  Authorization: token ? \"Bearer \" + token : \"\"\n                },\n                body: JSON.stringify({\n                  Description: Description,\n                  Mail: Mail,\n                  DateFrom: DateFrom,\n                  DateTo: DateTo\n                })\n              }));\n\n            case 6:\n              response = _context31.sent;\n              _context31.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              json = _context31.sent;\n              return _context31.abrupt(\"return\", json);\n\n            case 13:\n              _context31.prev = 13;\n              _context31.t0 = _context31[\"catch\"](3);\n              console.error(_context31.t0);\n              return _context31.abrupt(\"return\", _context31.t0);\n\n            case 17:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, null, null, [[3, 13]], Promise);\n    }\n  }, {\n    key: \"sendMailStaffPartTime\",\n    value: function sendMailStaffPartTime(Description, Mail, DateFrom, DateTo) {\n      var token, response, json;\n      return _regeneratorRuntime.async(function sendMailStaffPartTime$(_context32) {\n        while (1) {\n          switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.next = 2;\n              return _regeneratorRuntime.awrap(_getToken());\n\n            case 2:\n              token = _context32.sent;\n              _context32.prev = 3;\n              _context32.next = 6;\n              return _regeneratorRuntime.awrap(fetch(url + \"/api/Staff/SendMailStaffPartTime\", {\n                method: \"POST\",\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\",\n                  Authorization: token ? \"Bearer \" + token : \"\"\n                },\n                body: JSON.stringify({\n                  Description: Description,\n                  Mail: Mail,\n                  DateFrom: DateFrom,\n                  DateTo: DateTo\n                })\n              }));\n\n            case 6:\n              response = _context32.sent;\n              _context32.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              json = _context32.sent;\n              return _context32.abrupt(\"return\", json);\n\n            case 13:\n              _context32.prev = 13;\n              _context32.t0 = _context32[\"catch\"](3);\n              console.error(_context32.t0);\n              return _context32.abrupt(\"return\", _context32.t0);\n\n            case 17:\n            case \"end\":\n              return _context32.stop();\n          }\n        }\n      }, null, null, [[3, 13]], Promise);\n    }\n  }]);\n\n  return MailStaffService;\n}();","map":{"version":3,"sources":["D:/angular/hts_reactnative/src/app/netWorking/staffService.ts"],"names":["Environment","_getToken","fetchAPIGet","fetchAPIPost","url","apiPost","StaffService","StaffId","PositionId","RecordAreaId","WorkplaceId","PageNum","PageSize","body","data","req","FirstName","firstName","LastName","lastName","Phone","phone","Email","email","positionId","recordAreaId","DutyId","dutyId","TitleId","titleId","Id","id","IsEnabled","isEnabled","StaffData","DateTime","DateFrom","DateTo","ListStaff","StaffFreeTimesList","SearchText","ClientId","ReportStaffService","ListWorkingSchedule","OverTimeOTRecordByDayInfo","MailStaffService","ListMail","token","fetch","method","headers","Accept","Authorization","JSON","stringify","response","json","console","error","Description","Mail","StringDateFrom","StringDateTo","Preparedby","Verifiedby"],"mappings":"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","sourcesContent":["import { Environment } from \"../environment\";\r\nimport { _getToken } from \"./authService\";\r\nimport { IResponseModel } from \"../models/IResponseModel\";\r\nimport { IWorkingScheduleRequest, ICreateStaffRequest } from \"../models/staffModel\";\r\nimport { fetchAPIGet, fetchAPIPost } from \"./baseService\";\r\nlet url = Environment.apiPost;\r\nexport class StaffService {\r\n  public static async getStaffInfo(\r\n    StaffId: number,\r\n    PositionId: number,\r\n    RecordAreaId: number,\r\n    WorkplaceId:number,\r\n    PageNum: number,\r\n    PageSize: number\r\n  ): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetStaffInfo`,\r\n      body: { StaffId, PositionId, RecordAreaId, WorkplaceId, PageNum, PageSize },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async createStaff(req: ICreateStaffRequest): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/Create`,\r\n      body: {\r\n        FirstName: req.firstName,\r\n        LastName: req.lastName,\r\n        Phone: req.phone,\r\n        Email: req.email,\r\n        PositionId: req.positionId,\r\n        RecordAreaId: req.recordAreaId,\r\n        DutyId: req.dutyId,\r\n        TitleId: req.titleId,\r\n        WorkplaceId: req.WorkplaceId,\r\n      },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async updateStaff(req: ICreateStaffRequest): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/Update`,\r\n      body: {\r\n        Id: req.id,\r\n        IsEnabled: req.isEnabled,\r\n        FirstName: req.firstName,\r\n        LastName: req.lastName,\r\n        Phone: req.phone,\r\n        Email: req.email,\r\n        PositionId: req.positionId,\r\n        RecordAreaId: req.recordAreaId,\r\n        DutyId: req.dutyId,\r\n      },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async createWorking(\r\n    StaffData: { StaffId: number; WorkingScheduleData: IWorkingScheduleRequest }[]\r\n  ): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/CreateWorking`,\r\n      body: { StaffData },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async getAllWorkingTimeByStaff(StaffId: number, DateTime: string): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetWorkingTimeByStaff`,\r\n      body: { StaffId, DateTime },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async getAllDuty(): Promise<IResponseModel> {\r\n    let data = (await fetchAPIGet({ url: `/api/Staff/GetAllDuty` })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async getAllPosition(): Promise<IResponseModel> {\r\n    let data = (await fetchAPIGet({ url: `/api/Staff/GetAllPosition` })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async getAllRecordArea(): Promise<IResponseModel> {\r\n    let data = (await fetchAPIGet({ url: `/api/Staff/GetAllRecordArea` })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async getAllLegend(): Promise<IResponseModel> {\r\n    let data = (await fetchAPIGet({ url: `/api/Staff/GetAllLegend` })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async getAllWorkingTime(): Promise<IResponseModel> {\r\n    let data = (await fetchAPIGet({ url: `/api/Staff/GetAllWorkingTime` })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async GetListOfStarf(\r\n    DateFrom: string,\r\n    DateTo: string,\r\n    ListStaff: { StaffId: number }[]\r\n  ): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetListOfStarf`,\r\n      body: {\r\n        DateFrom,\r\n        DateTo,\r\n        ListStaff,\r\n      },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  //part time\r\n  public static async getAllWorkingTimeFreeStaff(): Promise<IResponseModel> {\r\n    let data = (await fetchAPIGet({ url: `/api/Staff/GetAllWorkingTimeFreeStaff` })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async getFreeStaff(DateFrom: string, DateTo: string, RecordAreaId: number): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetFreeStaff`,\r\n      body: {\r\n        DateFrom,\r\n        DateTo,\r\n        RecordAreaId,\r\n      },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async createStaffFreeTime(\r\n    StaffFreeTimesList: {\r\n      StaffId: number;\r\n      StaffFreeTimes: { Rank: string; FreeDate: string; WorkingTimeId: number[] }[];\r\n    }[]\r\n  ): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/CreateStaffFreeTime`,\r\n      body: { StaffFreeTimesList },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async updateStaffFreeTime(\r\n    StaffId: number,\r\n    StaffFreeTimesList: { Rank: string; FreeDate: string; WorkingTimeId: number[] }[]\r\n  ): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/UpdateStaffFreeTime`,\r\n      body: { StaffId, StaffFreeTimesList },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async getTitle(\r\n    SearchText: string,\r\n    PageNum: number,\r\n    PageSize: number,\r\n    ClientId: number,\r\n    WorkplaceId: number\r\n  ): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Title/GetTitle`,\r\n      body: {\r\n        SearchText,\r\n        PageNum,\r\n        PageSize,\r\n        ClientId,\r\n        WorkplaceId,\r\n      },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n}\r\nexport class ReportStaffService {\r\n  // WeeklyCrewSchedule\r\n  public static async getHourStoreService(DateTime: any, RecordAreaId: number): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetHourStoreService`,\r\n      body: { DateTime, RecordAreaId },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async getStaffByRecordArea(RecordAreaId: number): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetStaffByRecordArea`,\r\n      body: { RecordAreaId },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async getWeeklyDynamicCrewScheduleByStaff(\r\n    StaffId: number,\r\n    DateTime: any,\r\n    RecordAreaId: number\r\n  ): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetWeeklyDynamicCrewScheduleByStaff`,\r\n      body: { StaffId, DateTime, RecordAreaId },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n\r\n  // WeeklyDynamicCrewSchedule\r\n  public static async getListStaffWeeklyDynamicCrewSchedule(\r\n    RecordAreaId: number = null,\r\n    DateFrom: string,\r\n    DateTo: string\r\n  ): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetListStaffWeeklyDynamicCrewSchedule`,\r\n      body: { RecordAreaId, DateFrom, DateTo },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  // OfficeAttendanceRecord\r\n  public static async getListOfficeAttendanceRecord(\r\n    DateFrom: string,\r\n    DateTo: string,\r\n    PositionId: number\r\n  ): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetListOfficeAttendanceRecord`,\r\n      body: { DateFrom, DateTo, PositionId },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async updateOfficeAttendanceRecord(\r\n    PositionId: number,\r\n    ListWorkingSchedule: { workingScheduleId: number; LegendId: number }[]\r\n  ): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/UpdateOfficeAttendanceRecord`,\r\n      body: { PositionId, ListWorkingSchedule },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  // OverTimeOTRecord\r\n  public static async getOverTimeOTRecordInfo(DateFrom: string, DateTo: string, RecordAreaId: number): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetOverTimeOTRecordInfo`,\r\n      body: { DateFrom, DateTo, RecordAreaId },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async getOverTimeOTRecord(DateTime: string, RecordAreaId: number): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetOverTimeOTRecord`,\r\n      body: { DateTime, RecordAreaId },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  public static async updateOverTimeOTRecordByDay(\r\n    OverTimeOTRecordByDayInfo: { WorkingScheduleId: number; NotExtra: string; CheckNotExtra: number }[]\r\n  ): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/UpdateOverTimeOTRecordByDay`,\r\n      body: { OverTimeOTRecordByDayInfo },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n  //part time\r\n  public static async GetWeeklyPartTimeSchedule(DateFrom: string, DateTo: string): Promise<IResponseModel> {\r\n    let data = (await fetchAPIPost({\r\n      url: `/api/Staff/GetWeeklyPartTimeSchedule`,\r\n      body: { DateFrom, DateTo },\r\n    })) as IResponseModel;\r\n    return data;\r\n  }\r\n}\r\nexport class MailStaffService {\r\n  public static async sendMailWorkingTimeByStaff(\r\n    ListMail: {\r\n      DateTime: string;\r\n      StaffId: number;\r\n      Description: string;\r\n      Mail: string;\r\n    }[]\r\n  ): Promise<IResponseModel> {\r\n    const token = await _getToken();\r\n    try {\r\n      let response = await fetch(url + `/api/Staff/SendMailWorkingTimeByStaff`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token ? `Bearer ${token}` : \"\",\r\n        },\r\n        body: JSON.stringify({ ListMail }),\r\n      });\r\n      let json = await response.json();\r\n      return json;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return error;\r\n    }\r\n  }\r\n  public static async sendMailWeeklyCrewsCheduleAndOTForecastSample(\r\n    DateTime: string,\r\n    Description: string,\r\n    Mail: string\r\n  ): Promise<IResponseModel> {\r\n    const token = await _getToken();\r\n    try {\r\n      let response = await fetch(url + `/api/Staff/SendMailWeeklyCrewsCheduleAndOTForecastSample`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token ? `Bearer ${token}` : \"\",\r\n        },\r\n        body: JSON.stringify({\r\n          DateTime,\r\n          Description,\r\n          Mail,\r\n        }),\r\n      });\r\n      let json = await response.json();\r\n      return json;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return error;\r\n    }\r\n  }\r\n  public static async sendMailWeeklyDynamicCrewSchedule(\r\n    Description: string,\r\n    Mail: string,\r\n    StringDateFrom: string,\r\n    StringDateTo: string\r\n  ): Promise<IResponseModel> {\r\n    const token = await _getToken();\r\n    try {\r\n      let response = await fetch(url + `/api/Staff/SendMailWeeklyDynamicCrewSchedule`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token ? `Bearer ${token}` : \"\",\r\n        },\r\n        body: JSON.stringify({\r\n          Description,\r\n          Mail,\r\n          StringDateFrom,\r\n          StringDateTo,\r\n        }),\r\n      });\r\n      let json = await response.json();\r\n      return json;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return error;\r\n    }\r\n  }\r\n  public static async sendMailOfficeAttendanceRecord(\r\n    Description: string,\r\n    Mail: string,\r\n    Preparedby: string,\r\n    Verifiedby: string,\r\n    DateFrom: string,\r\n    DateTo: string,\r\n    PositionId: number\r\n  ): Promise<IResponseModel> {\r\n    const token = await _getToken();\r\n    try {\r\n      let response = await fetch(url + `/api/Staff/SendMailOfficeAttendanceRecord`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token ? `Bearer ${token}` : \"\",\r\n        },\r\n        body: JSON.stringify({\r\n          Description,\r\n          Mail,\r\n          Preparedby,\r\n          Verifiedby,\r\n          DateFrom,\r\n          DateTo,\r\n          PositionId,\r\n        }),\r\n      });\r\n      let json = await response.json();\r\n      return json;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return error;\r\n    }\r\n  }\r\n  public static async sendMailOverTimeOTRecord(\r\n    Description: string,\r\n    Mail: string,\r\n    DateFrom: string,\r\n    DateTo: string\r\n  ): Promise<IResponseModel> {\r\n    const token = await _getToken();\r\n    try {\r\n      let response = await fetch(url + `/api/Staff/SendMailOverTimeOTRecord`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token ? `Bearer ${token}` : \"\",\r\n        },\r\n        body: JSON.stringify({\r\n          Description,\r\n          Mail,\r\n          DateFrom,\r\n          DateTo,\r\n        }),\r\n      });\r\n      let json = await response.json();\r\n      return json;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return error;\r\n    }\r\n  }\r\n  public static async sendMailStaffPartTime(\r\n    Description: string,\r\n    Mail: string,\r\n    DateFrom: string,\r\n    DateTo: string\r\n  ): Promise<IResponseModel> {\r\n    const token = await _getToken();\r\n    try {\r\n      let response = await fetch(url + `/api/Staff/SendMailStaffPartTime`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token ? `Bearer ${token}` : \"\",\r\n        },\r\n        body: JSON.stringify({\r\n          Description,\r\n          Mail,\r\n          DateFrom,\r\n          DateTo,\r\n        }),\r\n      });\r\n      let json = await response.json();\r\n      return json;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return error;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}